/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/status/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtain server status */
    get: operations['getStatus'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/currency/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtain the supported currencies */
    get: operations['getCurrency'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/cost-type/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtain the supported cost types */
    get: operations['getCostType'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/cost-models/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List the cost models */
    get: operations['listCostModels'];
    put?: never;
    /** Create a new cost model. */
    post: operations['createCostModel'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/cost-models/{cost_model_uuid}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a Cost Model. */
    get: operations['getCostModel'];
    /** Update a Cost Model */
    put: operations['updateCostModel'];
    post?: never;
    /** Delete a Cost Model */
    delete: operations['deleteCostModel'];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/forecasts/aws/costs/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          /**
           * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
           * @example {
           *       "enabled": false
           *     }
           */
          filter?: components['parameters']['QueryFilter'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description An object describing the cost forecast. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Forecast'];
          };
        };
        /** @description Request Error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/forecasts/azure/costs/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          /**
           * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
           * @example {
           *       "enabled": false
           *     }
           */
          filter?: components['parameters']['QueryFilter'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description An object describing the cost forecast. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Forecast'];
          };
        };
        /** @description Request Error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/forecasts/gcp/costs/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          /**
           * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
           * @example {
           *       "enabled": false
           *     }
           */
          filter?: components['parameters']['QueryFilter'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description An object describing the cost forecast. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Forecast'];
          };
        };
        /** @description Request Error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/forecasts/openshift/costs/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          /**
           * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
           * @example {
           *       "enabled": false
           *     }
           */
          filter?: components['parameters']['QueryFilter'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description An object describing the cost forecast. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Forecast'];
          };
        };
        /** @description Request Error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/forecasts/openshift/infrastructures/aws/costs/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          /**
           * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
           * @example {
           *       "enabled": false
           *     }
           */
          filter?: components['parameters']['QueryFilter'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description An object describing the cost forecast. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Forecast'];
          };
        };
        /** @description Request Error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/forecasts/openshift/infrastructures/all/costs/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          /**
           * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
           * @example {
           *       "enabled": false
           *     }
           */
          filter?: components['parameters']['QueryFilter'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description An object describing the cost forecast. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Forecast'];
          };
        };
        /** @description Request Error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/forecasts/openshift/infrastructures/azure/costs/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          /**
           * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
           * @example {
           *       "enabled": false
           *     }
           */
          filter?: components['parameters']['QueryFilter'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description An object describing the cost forecast. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Forecast'];
          };
        };
        /** @description Request Error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/forecasts/openshift/infrastructures/gcp/costs/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: {
      parameters: {
        query?: {
          /**
           * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
           * @example {
           *       "enabled": false
           *     }
           */
          filter?: components['parameters']['QueryFilter'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description An object describing the cost forecast. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Forecast'];
          };
        };
        /** @description Request Error */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/metrics/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtain Metrics */
    get: operations['getMetrics'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/organizations/aws/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** View AWS organizations */
    get: {
      parameters: {
        query?: {
          /**
           * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
           * @example {
           *       "enabled": false
           *     }
           */
          filter?: components['parameters']['QueryFilter'];
          /** @description Parameter for selecting the offset of data. */
          offset?: components['parameters']['QueryOffset'];
          /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
          limit?: components['parameters']['ReportQueryLimit'];
          /** @description String to indicate org unit id */
          org_unit_id?: components['parameters']['OrganizationFilter'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A paginated list of Organization objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['OrganizationPagination'];
          };
        };
        /** @description Access to the requested resource is forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Unexpected Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/aws/costs/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain cost reports */
    get: operations['getAWSCostReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/azure/costs/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain cost reports */
    get: operations['getAzureCostReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/openshift/costs/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain cost reports */
    get: operations['getOpenShiftCostReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/gcp/costs/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain cost reports */
    get: operations['getGCPCostReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/aws/instance-types/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain AWS instance type data */
    get: operations['getAWSInstanceReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/azure/instance-types/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain Azure instance type data */
    get: operations['getAzureInstanceReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/gcp/instance-types/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain GCP instance type data */
    get: operations['getGCPInstanceReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/aws/storage/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain AWS storage data */
    get: operations['getAWSStorageReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/azure/storage/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain Azure storage data */
    get: operations['getAzureStorageReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/gcp/storage/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain GCP storage data */
    get: operations['getGCPStorageReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/aws/resources/ec2-compute/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain AWS EC2 compute instances data */
    get: operations['getAWSEC2ComputeReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/openshift/compute/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift compute usage information */
    get: operations['getOpenShiftComputeReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/openshift/memory/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift memory usage information */
    get: operations['getOpenShiftMemoryReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/openshift/volumes/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift volume usage information */
    get: operations['getOpenShiftVolumeReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/openshift/resources/virtual-machines/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain Virtual Machines running in OpenShift */
    get: operations['getOpenShiftVirtualMachinesReport'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/openshift/infrastructures/all/costs/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift on all infrastructures cost reports */
    get: operations['getOpenShiftAllCostReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/openshift/infrastructures/all/storage/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift on all infrastructures storage data */
    get: operations['getOpenShiftAllInventoryStorageReport'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/openshift/infrastructures/all/instance-types/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift on all infrastructures instance data */
    get: operations['getOpenShiftAllInventoryInstanceReport'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/openshift/infrastructures/aws/costs/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift on AWS cost reports */
    get: operations['getOpenShiftAWSCostReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/openshift/infrastructures/aws/storage/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift on AWS storage data */
    get: operations['getOpenShiftAWSInventoryStorageReport'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/openshift/infrastructures/aws/instance-types/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift on AWS instance data */
    get: operations['getOpenShiftAWSInventoryInstanceReport'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/openshift/infrastructures/gcp/costs/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift on GCP cost reports */
    get: operations['getOpenShiftGCPCostReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/openshift/infrastructures/gcp/storage/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift on GCP storage data */
    get: operations['getOpenShiftGCPInventoryStorageReport'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/openshift/infrastructures/gcp/instance-types/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift on GCP instance data */
    get: operations['getOpenShiftGCPInventoryInstanceReport'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/openshift/infrastructures/azure/costs/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift on Azure cost reports */
    get: operations['getOpenShiftAzureCostReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/openshift/infrastructures/azure/storage/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift on Azure storage data */
    get: operations['getOpenShiftAzureInventoryStorageReport'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/reports/openshift/infrastructures/azure/instance-types/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift on Azure instance data */
    get: operations['getOpenShiftAzureInventoryInstanceReport'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ingress/reports/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Ingress Reports */
    get: operations['listIngressReports'];
    put?: never;
    /** Post ingress reports */
    post: operations['postIngressReports'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/ingress/reports/{source_id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get ingress reports for a source */
    get: operations['getSourceIngressReports'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Resource Types For RBAC */
    get: operations['listResourceTypes'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/aws-accounts/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List AWS Accounts For RBAC */
    get: operations['listResourcesAwsAccounts'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/aws-categories/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtain mapping of key and values for AWS Categories. */
    get: operations['listResourcesAwsCategories'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/aws-regions/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List AWS Regions For RBAC */
    get: operations['listResourcesAwsRegions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/aws-services/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List AWS Services For RBAC */
    get: operations['listResourcesAwsServices'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/aws-ec2-compute-instances/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List AWS EC2 Instances For RBAC */
    get: operations['listResourcesAwsEC2Instances'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/aws-ec2-compute-os/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List AWS EC2 Operating Systems For RBAC */
    get: operations['listResourcesAwsEC2OperatingSystems'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/gcp-accounts/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List GCP Accounts For RBAC */
    get: operations['listResourcesGcpAccounts'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/gcp-projects/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List GCP Projects For RBAC */
    get: operations['listResourcesGcpProjects'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/gcp-services/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List GCP Services For RBAC */
    get: operations['listResourcesGcpServices'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/gcp-regions/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List GCP Regions For RBAC */
    get: operations['listResourcesGcpRegions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/aws-organizational-units/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List AWS Organizational Units For RBAC */
    get: operations['listResourcesAwsOrgUnits'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/azure-subscription-guids/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Azure Subscription Guids For RBAC */
    get: operations['listResourcesAzureSubGuids'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/azure-services/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Azure Services For RBAC */
    get: operations['listResourcesAzureServices'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/azure-regions/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Azure Regions For RBAC */
    get: operations['listResourcesAzureRegions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/openshift-clusters/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List OpenShift Clusters For RBAC */
    get: operations['listResourcesOpenShiftClusters'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/openshift-nodes/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List OpenShift Nodes For RBAC */
    get: operations['listResourcesOpenShiftNodes'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/openshift-projects/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List OpenShift Projects For RBAC */
    get: operations['listResourcesOpenShiftProjects'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/openshift-virtual-machines/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List OpenShift Virtual Machines For RBAC */
    get: operations['listResourcesOpenShiftVirtualMachines'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/resource-types/cost-models/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List Cost Models For RBAC */
    get: operations['listResourcesCostModels'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/user-access/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns user permission status. */
    get: operations['listUserAccess'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/account-settings/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtain the current account settings */
    get: operations['getUserSettings'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/account-settings/{setting}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Obtain a specific current user account setting */
    get: operations['getUserSetting'];
    /** Modify a specific current user account setting. */
    put: operations['putAccountSettings'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sources/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List the integrations */
    get: operations['listSources'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sources/{source_id}/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get an integration */
    get: operations['getSource'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sources/{source_id}/stats/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get integration statistics */
    get: operations['getSourceStats'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/sources/aws-s3-regions/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List available AWS S3 regions */
    get: operations['getAWSS3Regions'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/aws/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain AWS tags */
    get: operations['getAWSTagData'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/aws/{key}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain AWS tags */
    get: operations['getAWSTagKeyData'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/azure/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain Azure tags */
    get: operations['getAzureTagData'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/azure/{key}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain Azure tags */
    get: operations['getAzureTagKeyData'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/gcp/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain GCP tags */
    get: operations['getGCPTagData'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/gcp/{key}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain GCP tags */
    get: operations['getGCPTagKeyData'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/openshift/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift tags */
    get: operations['getOpenShiftTagData'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/openshift/{key}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift tags */
    get: operations['getOpenShiftTagKeyData'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/openshift/infrastructures/all/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift-on-All tags */
    get: operations['getOpenShiftAllTagData'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/openshift/infrastructures/all/{key}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift-on-All tags */
    get: operations['getOpenShiftAllTagKeyData'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/openshift/infrastructures/aws/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift-on-AWS tags */
    get: operations['getOpenShiftAWSTagData'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/openshift/infrastructures/aws/{key}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift-on-AWS tags */
    get: operations['getOpenShiftAWSTagKeyData'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/openshift/infrastructures/azure/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift-on-Azure tags */
    get: operations['getOpenShiftAzureTagData'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/openshift/infrastructures/azure/{key}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift-on-Azure tags */
    get: operations['getOpenShiftAzureTagKeyData'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/openshift/infrastructures/gcp/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift-on-GCP tags */
    get: operations['getOpenShiftGCPTagData'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tags/openshift/infrastructures/gcp/{key}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to obtain OpenShift-on-GCP tags */
    get: operations['getOpenShiftGCPTagKeyData'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/settings/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to cost management settings */
    get: operations['getSettings'];
    put?: never;
    /** Assign to cost management settings */
    post: operations['assignSettings'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/settings/aws_category_keys/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query to cost management settings */
    get: operations['getAwsCategoryKeysSettings'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/settings/aws_category_keys/enable/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Enable aws category key by uuid. */
    put: operations['putEnableAwsCategoryKeysSettings'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/settings/aws_category_keys/disable/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Disable aws category key by uuid. */
    put: operations['putDisableAwsCategoryKeysSettings'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/settings/cost-groups/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query which projects belong to which cost groups */
    get: operations['getSettingsCostGroups'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/settings/cost/groups/add/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Add projects to a cost group */
    put: operations['putSettingsCostGroups'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/settings/cost-groups/remove/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Remove projects from a cost group */
    put: operations['putSettingsCostGroupsRemove'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/settings/tags/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Query tags in Cost Management from cloud sources */
    get: operations['getSettingsTags'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/settings/tags/enable/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Enable tags in Cost Management */
    put: operations['putSettingsTagsEnable'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/settings/tags/disable/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Disable tags in Cost Management */
    put: operations['putSettingsTagsDisable'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/settings/tags/mappings/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns relationship mappings for Tag Reconciliation */
    get: operations['getSettingsTagsMappings'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/settings/tags/mappings/parent/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns available options for tags that can be marked as a parent. */
    get: operations['getSettingsTagsMappingsParent'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/settings/tags/mappings/parent/remove/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Removes all parent and child tags. */
    put: operations['putSettingsTagsMappingsParentRemove'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/settings/tags/mappings/child/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns available options for tags that can be marked as a child. */
    get: operations['getSettingsTagsMappingsChild'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/settings/tags/mappings/child/remove/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Removes child tags from mapping. */
    put: operations['putSettingsTagsMappingsChildRemove'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/settings/tags/mappings/child/add/': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Adds child tags to a parent tag. */
    put: operations['putSettingsTagsMappingsParent'];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/recommendations/openshift': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get all recommendations
     * @description This feature is in limited preview for select customers. Refer to [this link](https://github.com/RedHatInsights/ros-ocp-backend/blob/main/openapi.json) if you want checkout the OpenAPI spec file.
     */
    get: operations['getRecommendationList'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/recommendations/openshift/{recommendation-id}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get recommendation for container
     * @description This feature is in limited preview for select customers
     */
    get: operations['getRecommendationById'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    CostGroupsResponse: {
      data: {
        project?: string;
        group?: string;
        default?: boolean;
        clusters?: string[];
      }[];
    };
    CostModel: {
      name: string;
      description: string;
      currency?: string;
      source_type: string;
      source_uuids?: string[];
      rates?: (components['schemas']['TieredRate'] | components['schemas']['TagRate'])[];
      markup?: components['schemas']['Markup'];
      /** @enum {string} */
      distribution?: CostModelDistribution;
    };
    CostModelResp: {
      name: string;
      description: string;
      currency?: string;
      source_type: string;
      sources?: {
        /** @example e5ff62e7-e6d6-5513-5532-45fe72792dae */
        uuid?: string;
        /** @example source */
        name?: string;
      }[];
      rates?: (components['schemas']['TieredRate'] | components['schemas']['TagRate'])[];
      /** @enum {string} */
      distribution?: CostModelRespDistribution;
    };
    CostModelOut: components['schemas']['CostModelResp'] & {
      /** Format: uuid */
      readonly uuid?: string;
      /** Format: date-time */
      readonly created_timestamp?: string;
      /** Format: date-time */
      readonly updated_timestamp?: string;
      markup?: components['schemas']['Markup'];
    };
    CostModelPagination: components['schemas']['ListPagination'] & {
      data: components['schemas']['CostModelOut'][];
    };
    CostTypePagination: components['schemas']['ListPagination'] & {
      data: components['schemas']['CostType'][];
    };
    CostType: {
      code: string;
      name: string;
      description: string;
    };
    Currency: components['schemas']['ListPagination'] & {
      data: components['schemas']['Currencies'][];
    };
    Currencies: {
      code: string;
      symbol: string;
      name: string;
      description: string;
    };
    Customer: {
      /** @example 11838292 */
      account_id: string;
    };
    CustomerOut: components['schemas']['Customer'] & {
      /**
       * Format: uuid
       * @example 600562e7-d7d7-4516-8522-410e72792daf
       */
      uuid: string;
      /** Format: date-time */
      date_created: string;
    };
    Error: {
      errors: Record<string, never>[];
    };
    DependencyError: {
      errors: Record<string, never>[];
    };
    Forecast: components['schemas']['ListPagination'] & {
      data: components['schemas']['ForecastData'][];
    };
    ForecastDataValueNumber: {
      /**
       * @description A value.
       * @example 123.456789
       */
      value?: number;
      /**
       * @description The value's units.
       * @example USD
       */
      units?: string;
    };
    ForecastDataValueString: {
      /**
       * @description A value.
       * @example 123.456789
       */
      value?: string;
      /**
       * @description The value's units.
       * @example USD
       */
      units?: string;
    };
    ForecastData: {
      data: {
        /**
         * Format: date
         * @description Future date for this forecast Y-value.
         * @example 2000-01-01
         */
        date?: string;
        values?: Record<string, never>[];
      }[];
    };
    Markup: {
      value?: number;
      /** @enum {string} */
      unit?: MarkupUnit;
    };
    PaginationMeta: {
      /**
       * Format: int64
       * @example 30
       */
      count?: number;
      /**
       * Format: int64
       * @example 5
       */
      limit?: number;
      /**
       * Format: int64
       * @example 10
       */
      offset?: number;
    };
    PaginationLinks: {
      /**
       * Format: uri
       * @example /cost-management/v1/(resources)/?offset=0
       */
      first?: string;
      /**
       * Format: uri
       * @example /cost-management/v1/(resources)/?offset=20
       */
      previous?: string;
      /**
       * Format: uri
       * @example /cost-management/v1/(resources)/?offset=40
       */
      next?: string;
      /**
       * Format: uri
       * @example /cost-management/v1/(resources)/?offset=100
       */
      last?: string;
    };
    ListPagination: {
      meta?: components['schemas']['PaginationMeta'];
      links?: components['schemas']['PaginationLinks'];
    };
    Metrics: components['schemas']['ListPagination'] & {
      data: components['schemas']['MetricsOut'][];
    };
    MetricsOut: {
      source_type: string;
      metric: string;
      label_metric: string;
      label_measurement: string;
      label_measurement_unit: string;
      default_cost_type: string;
    };
    OrganizationFilter: {
      resolution?: components['schemas']['ReportResolution'];
      time_scope_value?: components['schemas']['ReportTimeScopeValue'];
      time_scope_units?: components['schemas']['ReportTimeScopeUnits'];
      org_unit_id?: components['schemas']['OrgUnitId'];
    };
    Organization: {
      /** @example OU_003 */
      org_unit_id: string;
      /** @example Dept OU_003 */
      org_unit_name?: string;
      /** @example R_001&OU_002&OU_003 */
      org_unit_path: string;
      /** @example 2 */
      level: number;
      /**
       * @description the list of sub orgs under the org
       * @example [
       *       "OU_004",
       *       "OU_005"
       *     ]
       */
      sub_orgs: string[];
      /**
       * @description the list of accounts under the org
       * @example [
       *       "account 003"
       *     ]
       */
      accounts: string[];
    };
    OrganizationPagination: components['schemas']['ListPagination'] & {
      data: components['schemas']['Organization'][];
    };
    UserAccessListPagination: components['schemas']['ListPagination'] & {
      data: components['schemas']['UserAccessTypeOut'][];
    };
    ResourceTypeListPagination: components['schemas']['ListPagination'] & {
      data: components['schemas']['ResourceTypeListOut'][];
    };
    ResourceTypePagination: components['schemas']['ListPagination'] & {
      data: components['schemas']['ResourceTypeOut'][];
    };
    ResourceTypeAwsCategories: components['schemas']['ListPagination'] & {
      /** @example [
       *       {
       *         "key": "env",
       *         "values": [
       *           "prod",
       *           "ephemeral",
       *           "stage"
       *         ],
       *         "enabled": "True"
       *       }
       *     ] */
      data: unknown[];
    };
    ResourceTypeOut: {
      value?: string;
    };
    UserAccessTypeOut: {
      type?: string;
      access?: boolean;
    };
    ResourceTypeListOut: {
      value?: string;
      path?: string;
      count?: number;
    };
    Source: {
      /** @example Platform source identifier */
      id: number;
      /** @example AWS */
      source_type: string;
    };
    SourceIn: components['schemas']['Source'] & {
      /**
       * @description Dictionary containing resource name.
       * @example {
       *       "resource_name": "arn"
       *     }
       */
      authentication: Record<string, never>;
      /**
       * @description Dictionary containing billing source.
       * @example {
       *       "bucket": "test-bucket"
       *     }
       */
      billing_source: Record<string, never>;
    };
    SourceOut: components['schemas']['Source'] & {
      /**
       * Format: int64
       * @example 1
       */
      id: number;
      /**
       * Format: uuid
       * @example 57e60f90-8c0c-4bd1-87a0-2143759aae1d
       */
      uuid?: string;
      /** @example My Source */
      name?: string;
      /** @example OCP */
      source_type?: string;
      /**
       * @description Dictionary containing resource name.
       * @example {
       *       "resource_name": "arn"
       *     }
       */
      authentication?: Record<string, never>;
      /**
       * @description Dictionary containing billing source.
       * @example {
       *       "bucket": "test-bucket"
       *     }
       */
      billing_source?: Record<string, never>;
      /**
       * @description Flag to indicate if provider is linked to source.
       * @default false
       */
      provider_linked: boolean;
      /**
       * @description Flag to indicate if provider is successfully configured.
       * @default false
       */
      active: boolean;
      /**
       * @description Flag to indicate if provider is paused.
       * @default false
       */
      paused: boolean;
      /**
       * @description Flag to indicate if provider has report data for the current month.
       * @default false
       */
      current_month_data: boolean;
      /**
       * @description Flag to indicate if provider has report data for the previous month.
       * @default false
       */
      previous_month_data: boolean;
      /**
       * @description Flag to indicate if provider has report data for any month.
       * @default false
       */
      has_data: boolean;
      /**
       * @description Dictionary containing OpenShift foundational infrastructure type and uuid.
       * @example {
       *       "type": "AWS",
       *       "uuid": "57e60f90-8c0c-4bd1-87a0-2143759aae1d"
       *     }
       */
      infrastructure?: Record<string, never>;
      /** @description List of cost model name and UUIDs associated with this source. */
      cost_models?: {
        /**
         * Format: uuid
         * @example D823A725-DC10-496A-AF08-12533E4F8FE4
         */
        uuid?: string;
        /** @example My Great Cost Model */
        name?: string;
      }[];
      /**
       * @description Dictionary containing OpenShift foundational infrastructure type and uuid.
       * @example {
       *       "crawl_heirarchy": "False"
       *     }
       */
      additional_context?: Record<string, never>;
    };
    SourcePagination: components['schemas']['ListPagination'] & {
      data: components['schemas']['SourceOut'][];
    };
    IngressReportIn: {
      /**
       * @description Source uuid for reports.
       * @example 402719af-93b2-4ae5-9eda-380d1a1e5843
       */
      source: string;
      /**
       * @description List of reports for ingestion.
       * @example [
       *       "report1.csv",
       *       "report2.csv"
       *     ]
       */
      reports_list: string[];
      /**
       * @description Billing year for report files
       * @example 2022
       */
      billing_year: string;
      /**
       * @description Billing month for report files
       * @example 01
       */
      billing_month: string;
    };
    IngressReportOut: {
      /**
       * Format: uuid
       * @example 57e60f90-8c0c-4bd1-87a0-2143759aae1d
       */
      uuid?: string;
      /**
       * Format: uuid
       * @example 57e60f90-8c0c-4bd1-87a0-2143759aae1d
       */
      source_uuid?: string;
      /** @example [
       *       "file1",
       *       "file2"
       *     ] */
      reports_list?: string[];
      /**
       * @description Billing year for files.
       * @example 2022
       */
      bill_year?: string;
      /**
       * @description Billing month for files.
       * @example 01
       */
      billing_month?: string;
      /**
       * Format: date-time
       * @description Timestamp of posted reports.
       */
      readonly created_timestamp?: unknown;
      /**
       * Format: date-time
       * @description Timestamp of successfully processed reports.
       */
      readonly completed_timestamp?: unknown;
    };
    IngressReportsPagination: components['schemas']['ListPagination'] & {
      data: components['schemas']['IngressReportOut'][];
    };
    TieredRate: {
      /**
       * Format: uuid
       * @example 83ee048e-3c1d-43ef-b945-108225ae52f4
       */
      readonly uuid?: string;
      /** @example {
       *       "name": "cpu_core_per_hour",
       *       "unit": "core-hours",
       *       "display_name": "Compute usage Rate"
       *     } */
      metric: Record<string, never>;
      /** @enum {string} */
      cost_type?: TieredRateCost_type;
      /** @example Rate description */
      description?: string;
      /** @example [
       *       {
       *         "value": 0.22,
       *         "unit": "USD",
       *         "usage": {
       *           "usage_start": 0,
       *           "usage_end": 10
       *         }
       *       }
       *     ] */
      tiered_rates?: {
        value?: number;
        usage?: Record<string, never>;
        /** @enum {string} */
        unit?: TieredRateTiered_ratesUnit;
      }[];
    };
    TagRate: {
      /**
       * Format: uuid
       * @example 83ee048e-3c1d-43ef-b945-108225ae52f4
       */
      readonly uuid?: string;
      /** @example {
       *       "name": "cpu_core_per_hour",
       *       "unit": "core-hours",
       *       "display_name": "Compute usage Rate"
       *     } */
      metric: Record<string, never>;
      /** @enum {string} */
      cost_type?: TagRateCost_type;
      /** @example Rate description */
      description?: string;
      tag_rates?: {
        /** @enum {string} */
        tag_key: TagRateTag_ratesTag_key;
        /** @example [
         *       {
         *         "tag_value": "dev",
         *         "unit": "USD",
         *         "usage": {
         *           "unit": "USD",
         *           "usage_start": 0,
         *           "usage_end": 10
         *         },
         *         "value": 0.2,
         *         "description": "Developers",
         *         "default": true
         *       }
         *     ] */
        tag_values?: {
          tag_value?: string;
          usage?: Record<string, never>;
          /** @enum {string} */
          unit?: TagRateTag_ratesTag_valuesUnit;
          value?: string;
          description?: string;
          default?: boolean;
        }[];
      };
    };
    ReportFilter: {
      /**
       * @description Limits the data points returns and aggregates remaining data.
       * @example 5
       */
      limit?: number;
      /**
       * @description Offsets the data points returned when using limit.
       * @example 5
       */
      offset?: number;
      resolution?: components['schemas']['ReportResolution'];
      time_scope_value?: components['schemas']['ReportTimeScopeValue'];
      time_scope_units?: components['schemas']['ReportTimeScopeUnits'];
      /** @example [] */
      resource_scope?: components['schemas']['ReportResourceScope'][];
      account?: string[];
      service?: string[];
      region?: string[];
      az?: string[];
      tag?: string[];
      org_unit_id?: components['schemas']['OrgUnitId'];
    };
    ReportAzureFilter: {
      /**
       * @description Limits the data points returns and aggregates remaining data.
       * @example 5
       */
      limit?: number;
      /**
       * @description Offsets the data points returned when using limit.
       * @example 5
       */
      offset?: number;
      resolution?: components['schemas']['ReportResolution'];
      time_scope_value?: components['schemas']['ReportTimeScopeValue'];
      time_scope_units?: components['schemas']['ReportTimeScopeUnits'];
      /** @example [] */
      resource_scope?: components['schemas']['ReportResourceScope'][];
      subscription_guid?: string[];
      service_name?: string[];
      resource_location?: string[];
      instance_type?: string[];
      tag?: string[];
    };
    ReportAWSEC2ComputeFilter: {
      /**
       * @description The resolution to apply to the report. Default resolution is daily.
       * @example monthly
       */
      resolution?: string;
      /**
       * @description The time scope to apply to the report. Default time scope is '-1', which is used for current month, '-2' is used for last month, amd '-3' is used for previous month.
       * @example -1
       * @enum {integer}
       */
      time_scope_value?: ReportAWSEC2ComputeFilterTime_scope_value;
      /**
       * @description The units to apply to the report. 'month' is the only valid value for this report.
       * @example month
       */
      time_scope_units?: string;
      resource_id?: string[];
      instance_name?: string[];
      account?: string[];
      /** @example [
       *       "us-east-1"
       *     ] */
      region?: string[];
      operating_system?: string[];
    };
    ReportOpenShiftFilter: {
      /**
       * @description Limits the data points returns and aggregates remaining data.
       * @example 5
       */
      limit?: number;
      /**
       * @description Offsets the data points returned when using limit.
       * @example 5
       */
      offset?: number;
      resolution?: components['schemas']['ReportResolution'];
      time_scope_value?: components['schemas']['ReportTimeScopeValue'];
      time_scope_units?: components['schemas']['ReportTimeScopeUnits'];
      /** @example [] */
      resource_scope?: components['schemas']['ReportResourceScope'][];
      project?: string[];
      cluster?: string[];
      pod?: string[];
      node?: string[];
      tag?: string[];
      infrastructures?: string[];
    };
    ReportOpenShiftAWSFilter: {
      /**
       * @description Limits the data points returns and aggregates remaining data.
       * @example 5
       */
      limit?: number;
      /**
       * @description Offsets the data points returned when using limit.
       * @example 5
       */
      offset?: number;
      resolution?: components['schemas']['ReportResolution'];
      time_scope_value?: components['schemas']['ReportTimeScopeValue'];
      time_scope_units?: components['schemas']['ReportTimeScopeUnits'];
      /** @example [] */
      resource_scope?: components['schemas']['ReportResourceScope'][];
      account?: string[];
      service?: string[];
      region?: string[];
      az?: string[];
      tag?: string[];
      project?: string[];
      cluster?: string[];
      node?: string[];
    };
    ReportOpenShiftAzureFilter: {
      /**
       * @description Limits the data points returns and aggregates remaining data.
       * @example 5
       */
      limit?: number;
      /**
       * @description Offsets the data points returned when using limit.
       * @example 5
       */
      offset?: number;
      resolution?: components['schemas']['ReportResolution'];
      time_scope_value?: components['schemas']['ReportTimeScopeValue'];
      time_scope_units?: components['schemas']['ReportTimeScopeUnits'];
      /** @example [] */
      resource_scope?: components['schemas']['ReportResourceScope'][];
      subscription_guid?: string[];
      service_name?: string[];
      resource_location?: string[];
      instance_type?: string[];
      tag?: string[];
      project?: string[];
      cluster?: string[];
      node?: string[];
    };
    /**
     * @description The grouping to apply to the report. No grouping by default. When grouping by account the account_alias will be provided if avaiable.
     * @example {
     *       "account": [
     *         "*"
     *       ]
     *     }
     */
    ReportGrouping: {
      account?: string[];
      service?: string[];
      region?: string[];
      az?: string[];
      instance_type?: string[];
      storage_type?: string[];
      tag?: string[];
      org_unit_id?: components['schemas']['OrgUnitId'];
    };
    /**
     * @description The grouping to apply to the report. No grouping by default. When grouping by account the account_alias will be provided if avaiable.
     * @example {
     *       "subscription_guid": [
     *         "*"
     *       ]
     *     }
     */
    ReportAzureGrouping: {
      subscription_guid?: string[];
      service_name?: string[];
      resource_location?: string[];
      instance_type?: string[];
      tag?: string[];
    };
    /**
     * @description The grouping to apply to the report. No grouping by default.
     * @example {
     *       "project": [
     *         "*"
     *       ]
     *     }
     */
    ReportOpenShiftGrouping: {
      cluster?: string[];
      project?: string[];
      node?: string[];
      tag?: string[];
    };
    /**
     * @description The grouping to apply to the report. No grouping by default. When grouping by account the account_alias will be provided if avaiable.
     * @example {
     *       "account": [
     *         "*"
     *       ]
     *     }
     */
    ReportOpenShiftAWSGrouping: {
      account?: string[];
      service?: string[];
      region?: string[];
      az?: string[];
      instance_type?: string[];
      storage_type?: string[];
      tag?: string[];
      cluster?: string[];
      project?: string[];
      node?: string[];
    };
    /**
     * @description The grouping to apply to the report. No grouping by default. When grouping by account the account_alias will be provided if avaiable.
     * @example {
     *       "subscription_guid": [
     *         "*"
     *       ]
     *     }
     */
    ReportOpenShiftAzureGrouping: {
      subscription_guid?: string[];
      service_name?: string[];
      resource_location?: string[];
      instance_type?: string[];
      tag?: string[];
      cluster?: string[];
      project?: string[];
      node?: string[];
    };
    /**
     * @description The ordering to apply to the report. Default is ascending order for the data.
     * @example {
     *       "cost": "asc"
     *     }
     */
    ReportOrdering: {
      /** @enum {string} */
      infrastructure?: ReportOrderingInfrastructure;
      /** @enum {string} */
      supplementary?: ReportOrderingSupplementary;
      /** @enum {string} */
      cost?: ReportOrderingCost;
      /** @enum {string} */
      usage?: ReportOrderingUsage;
      /** @enum {string} */
      delta?: ReportOrderingDelta;
      /** @enum {string} */
      account_alias?: ReportOrderingAccount_alias;
      /** @enum {string} */
      region?: ReportOrderingRegion;
      /** @enum {string} */
      service?: ReportOrderingService;
    };
    /**
     * @description The ordering to apply to the report. Default is ascending order for the data.
     * @example {
     *       "cost": "asc"
     *     }
     */
    ReportAzureOrdering: {
      /** @enum {string} */
      infrastructure?: ReportAzureOrderingInfrastructure;
      /** @enum {string} */
      supplementary?: ReportAzureOrderingSupplementary;
      /** @enum {string} */
      cost?: ReportAzureOrderingCost;
      /** @enum {string} */
      usage?: ReportAzureOrderingUsage;
      /** @enum {string} */
      delta?: ReportAzureOrderingDelta;
      /** @enum {string} */
      subscription_guid?: ReportAzureOrderingSubscription_guid;
      /** @enum {string} */
      resource_location?: ReportAzureOrderingResource_location;
      /** @enum {string} */
      service_name?: ReportAzureOrderingService_name;
      /** @enum {string} */
      instance_type?: ReportAzureOrderingInstance_type;
    };
    /**
     * @description The ordering to apply to the report. Default is ascending order for the data.
     * @example {
     *       "cost": "asc"
     *     }
     */
    ReportAWSEC2ComputeOrdering: {
      /** @enum {string} */
      cost?: ReportAWSEC2ComputeOrderingCost;
      /** @enum {string} */
      usage?: ReportAWSEC2ComputeOrderingUsage;
      /** @enum {string} */
      account?: ReportAWSEC2ComputeOrderingAccount;
      /** @enum {string} */
      operating_system?: ReportAWSEC2ComputeOrderingOperating_system;
      /** @enum {string} */
      resource_id?: ReportAWSEC2ComputeOrderingResource_id;
      /** @enum {string} */
      instance_name?: ReportAWSEC2ComputeOrderingInstance_name;
      /** @enum {string} */
      instance_type?: ReportAWSEC2ComputeOrderingInstance_type;
    };
    /**
     * @description The ordering to apply to the report. Default is ascending order for the data.
     * @example {
     *       "cluster": "asc"
     *     }
     */
    ReportInventoryOpenShiftOrdering: {
      /** @enum {string} */
      cluster?: ReportInventoryOpenShiftOrderingCluster;
      /** @enum {string} */
      project?: ReportInventoryOpenShiftOrderingProject;
      /** @enum {string} */
      node?: ReportInventoryOpenShiftOrderingNode;
      /** @enum {string} */
      usage?: ReportInventoryOpenShiftOrderingUsage;
      /** @enum {string} */
      request?: ReportInventoryOpenShiftOrderingRequest;
      /** @enum {string} */
      infrastructure?: ReportInventoryOpenShiftOrderingInfrastructure;
      /** @enum {string} */
      supplementary?: ReportInventoryOpenShiftOrderingSupplementary;
      /** @enum {string} */
      cost?: ReportInventoryOpenShiftOrderingCost;
      /** @enum {string} */
      limit?: ReportInventoryOpenShiftOrderingLimit;
    };
    /**
     * @description The ordering to apply to the report. Default is ascending order for the data.
     * @example {
     *       "cluster": "asc"
     *     }
     */
    ReportCostsOpenShiftOrdering: {
      /** @enum {string} */
      cluster?: ReportCostsOpenShiftOrderingCluster;
      /** @enum {string} */
      project?: ReportCostsOpenShiftOrderingProject;
      /** @enum {string} */
      node?: ReportCostsOpenShiftOrderingNode;
      /** @enum {string} */
      infrastructure?: ReportCostsOpenShiftOrderingInfrastructure;
      /** @enum {string} */
      supplementary?: ReportCostsOpenShiftOrderingSupplementary;
      /** @enum {string} */
      cost?: ReportCostsOpenShiftOrderingCost;
    };
    /**
     * @description The ordering to apply to the report. Default is ascending order for the data.
     * @example {
     *       "cost": "asc"
     *     }
     */
    ReportOpenShiftAWSOrdering: {
      /** @enum {string} */
      infrastructure?: ReportOpenShiftAWSOrderingInfrastructure;
      /** @enum {string} */
      supplementary?: ReportOpenShiftAWSOrderingSupplementary;
      /** @enum {string} */
      cost?: ReportOpenShiftAWSOrderingCost;
      /** @enum {string} */
      usage?: ReportOpenShiftAWSOrderingUsage;
      /** @enum {string} */
      delta?: ReportOpenShiftAWSOrderingDelta;
      /** @enum {string} */
      account_alias?: ReportOpenShiftAWSOrderingAccount_alias;
      /** @enum {string} */
      region?: ReportOpenShiftAWSOrderingRegion;
      /** @enum {string} */
      service?: ReportOpenShiftAWSOrderingService;
      /** @enum {string} */
      cluster?: ReportOpenShiftAWSOrderingCluster;
      /** @enum {string} */
      project?: ReportOpenShiftAWSOrderingProject;
      /** @enum {string} */
      node?: ReportOpenShiftAWSOrderingNode;
    };
    /**
     * @description The ordering to apply to the report. Default is ascending order for the data.
     * @example {
     *       "cost": "asc"
     *     }
     */
    ReportOpenShiftAzureOrdering: {
      /** @enum {string} */
      infrastructure?: ReportOpenShiftAzureOrderingInfrastructure;
      /** @enum {string} */
      supplementary?: ReportOpenShiftAzureOrderingSupplementary;
      /** @enum {string} */
      cost?: ReportOpenShiftAzureOrderingCost;
      /** @enum {string} */
      usage?: ReportOpenShiftAzureOrderingUsage;
      /** @enum {string} */
      delta?: ReportOpenShiftAzureOrderingDelta;
      /** @enum {string} */
      subscription_guid?: ReportOpenShiftAzureOrderingSubscription_guid;
      /** @enum {string} */
      resource_location?: ReportOpenShiftAzureOrderingResource_location;
      /** @enum {string} */
      service_name?: ReportOpenShiftAzureOrderingService_name;
      /** @enum {string} */
      instance_type?: ReportOpenShiftAzureOrderingInstance_type;
      /** @enum {string} */
      cluster?: ReportOpenShiftAzureOrderingCluster;
      /** @enum {string} */
      project?: ReportOpenShiftAzureOrderingProject;
      /** @enum {string} */
      node?: ReportOpenShiftAzureOrderingNode;
    };
    /** @example R_001 */
    OrgUnitId: string;
    /**
     * @description Field to calculate delta values for in report.
     * @example {
     *       "delta": "cost"
     *     }
     */
    ReportDelta: {
      delta?: string;
    };
    /**
     * @description The resolution to apply to the report. Default resolution is daily.
     * @enum {string}
     */
    ReportResolution: ReportResolution;
    /**
     * @description The units to apply to the report. Default time_scope_units is day.
     * @enum {string}
     */
    ReportTimeScopeUnits: ReportTimeScopeUnits;
    /**
     * @description The time scope to apply to the report. Default time scope is '-10', meaning the last 10 days. Last 30 days would be '-30'. '-10' and '-30' are only valid when used with 'day' time_scope_units.'-1' is used for current month, '-2' is used for last month when time_scope_units is 'month' otherwise invalid.
     * @example -10
     * @enum {integer}
     */
    ReportTimeScopeValue: ReportTimeScopeValue;
    /**
     * @description The resources scope to apply to the report. Default resource scope is null, meaning no product or service filtering.
     * @enum {string}
     */
    ReportResourceScope: ReportResourceScope;
    ReportValueUnit: {
      /**
       * @description The numerical value returned
       * @example 0
       */
      value?: number;
      /**
       * @description The units for the output data.
       * @example USD
       */
      units?: string;
    };
    ReportMetaTotalItem: {
      raw?: components['schemas']['ReportValueUnit'];
      markup?: components['schemas']['ReportValueUnit'];
      usage?: components['schemas']['ReportValueUnit'];
      total?: components['schemas']['ReportValueUnit'];
    };
    /** @description The meta total object returned. */
    ReportMetaTotal: {
      infrastructure?: components['schemas']['ReportMetaTotalItem'];
      supplementary?: components['schemas']['ReportMetaTotalItem'];
      cost?: components['schemas']['ReportMetaTotalItem'];
    };
    ReportPaginationMeta: {
      /**
       * Format: int64
       * @example 30
       */
      count?: number;
      delta?: components['schemas']['ReportDelta'];
      group_by?:
        | components['schemas']['ReportGrouping']
        | components['schemas']['ReportAzureGrouping']
        | components['schemas']['ReportOpenShiftGrouping']
        | components['schemas']['ReportOpenShiftAWSGrouping']
        | components['schemas']['ReportOpenShiftAzureGrouping'];
      order_by?:
        | components['schemas']['ReportOrdering']
        | components['schemas']['ReportAzureOrdering']
        | components['schemas']['ReportCostsOpenShiftOrdering']
        | components['schemas']['ReportInventoryOpenShiftOrdering']
        | components['schemas']['ReportOpenShiftAWSOrdering']
        | components['schemas']['ReportOpenShiftAzureOrdering'];
      filter?:
        | components['schemas']['ReportFilter']
        | components['schemas']['ReportAzureFilter']
        | components['schemas']['ReportOpenShiftFilter']
        | components['schemas']['ReportOpenShiftAWSFilter']
        | components['schemas']['ReportOpenShiftAzureFilter'];
      total?: components['schemas']['ReportMetaTotal'];
    };
    Report: {
      meta?: components['schemas']['ReportPaginationMeta'];
      links?: components['schemas']['PaginationLinks'];
    };
    ReportCost: components['schemas']['Report'] & {
      data: Record<string, never>[];
    };
    ReportCosts: components['schemas']['Report'] & {
      data: Record<string, never>[];
    };
    ReportInstanceInventory: components['schemas']['Report'] & {
      data: Record<string, never>[];
    };
    ReportStorageInventory: components['schemas']['Report'] & {
      data: Record<string, never>[];
    };
    ReportAWSEC2InstanceInventory: {
      meta?: {
        /**
         * Format: int64
         * @example 30
         */
        count?: number;
        order_by?: components['schemas']['ReportAWSEC2ComputeOrdering'];
        filter?: components['schemas']['ReportAWSEC2ComputeFilter'];
        total?: components['schemas']['ReportMetaTotal'];
      };
      links?: components['schemas']['PaginationLinks'];
    } & {
      data: Record<string, never>[];
    };
    ReportOpenShiftAWSStorageInventory: components['schemas']['Report'] & {
      group_by?: components['schemas']['ReportOpenShiftAWSGrouping'];
      order_by?: components['schemas']['ReportOpenShiftAWSOrdering'];
      filter?: components['schemas']['ReportOpenShiftAWSFilter'];
      data: Record<string, never>[];
    };
    ReportOpenShiftAWSInstanceInventory: components['schemas']['Report'] & {
      group_by?: components['schemas']['ReportOpenShiftAWSGrouping'];
      order_by?: components['schemas']['ReportOpenShiftAWSOrdering'];
      filter?: components['schemas']['ReportOpenShiftAWSFilter'];
      data: Record<string, never>[];
    };
    ReportOpenShiftAllStorageInventory: components['schemas']['ReportOpenShiftAWSStorageInventory'] &
      Record<string, never>;
    ReportOpenShiftAllInstanceInventory: components['schemas']['ReportOpenShiftAWSInstanceInventory'] &
      Record<string, never>;
    ReportOpenShiftAzureStorageInventory: components['schemas']['Report'] & {
      group_by?: components['schemas']['ReportOpenShiftAzureGrouping'];
      order_by?: components['schemas']['ReportOpenShiftAzureOrdering'];
      filter?: components['schemas']['ReportOpenShiftAzureFilter'];
      data: Record<string, never>[];
    };
    ReportOpenShiftAzureInstanceInventory: components['schemas']['Report'] & {
      group_by?: components['schemas']['ReportOpenShiftAzureGrouping'];
      order_by?: components['schemas']['ReportOpenShiftAzureOrdering'];
      filter?: components['schemas']['ReportOpenShiftAzureFilter'];
      data: Record<string, never>[];
    };
    ReportOpenShiftCpu: components['schemas']['Report'] & {
      data: Record<string, never>[];
    };
    ReportOpenShiftMemory: components['schemas']['Report'] & {
      data: Record<string, never>[];
    };
    ReportOpenShiftVolume: components['schemas']['Report'] & {
      data: Record<string, never>[];
    };
    ReportOpenShiftVirtualMachine: components['schemas']['Report'] & {
      data: Record<string, never>[];
    };
    SettingIn: {
      /** @example {
       *       "settings": {
       *         "tag-management": {
       *           "enabled": [
       *             "aws-tag_key1",
       *             "aws-tag_key2",
       *             "azure-tag_key1",
       *             "azure-tag_key2",
       *             "azure-tag_key3"
       *           ]
       *         }
       *       }
       *     } */
      api: Record<string, never>;
    };
    SettingOut: {
      fields?: Record<string, never>[];
      name?: string;
      component?: string;
    };
    SettingsTagsResponse: {
      meta?: components['schemas']['PaginationMeta'];
      links?: components['schemas']['PaginationLinks'];
      data?: {
        /** Format: uuid */
        uuid?: string;
      }[];
    };
    SettingsTagsMappingsResponse: {
      meta?: components['schemas']['PaginationMeta'];
      links?: components['schemas']['PaginationLinks'];
      data?: {
        /** Format: uuid */
        uuid?: string;
      }[];
    };
    SettingsTagsMappingsOptionsResponse: {
      meta?: components['schemas']['PaginationMeta'];
      links?: components['schemas']['PaginationLinks'];
      data?: {
        /** Format: uuid */
        uuid?: string;
      }[];
    };
    SettingsTagsEnabledLimitError: {
      /** @default The maximum number of enabled tags is 200. */
      error: string;
      /** @example 187 */
      enabled?: number;
      /** @example 200 */
      limit?: number;
    };
    GetAwsCategorySettings: components['schemas']['ListPagination'] & {
      /** @example [
       *       {
       *         "uuid": "be9b46e1-ae73-425c-a3bc-738018d2a41f",
       *         "key": "env",
       *         "enabled": "True"
       *       }
       *     ] */
      data: unknown[];
    };
    ModifyKeySettingsRequestBody: components['schemas']['ListPagination'] & {
      /** @example [
       *       {
       *         "ids": [
       *           "be9b46e1-ae73-425c-a3bc-738018d2a41f"
       *         ]
       *       }
       *     ] */
      data: unknown[];
    };
    PutAccountSettingRequestBody: components['schemas']['ListPagination'] & {
      /** @example [
       *       {
       *         "cost_type": "blended_cost"
       *       }
       *     ] */
      data: unknown[];
    };
    Status: {
      /**
       * Format: int64
       * @example 1
       */
      api_version: number;
      /** @example 178d2ea */
      commit?: string;
      /** @example 127.0.0.1:8000 */
      server_address?: string;
      /** @example 30 */
      rbac_cache_ttl?: number;
      /** @example {
       *       "system": "Darwin",
       *       "node": "node-1.example.com",
       *       "release": "17.5.0",
       *       "version": "Darwin Kernel Version 17.5.0",
       *       "machine": "x86_64",
       *       "processor": "i386"
       *     } */
      platform_info?: Record<string, never>;
      /** @example 3.6.1 */
      python_version?: string;
      /** @example {
       *       "coverage": "4.5.1",
       *       "coverage.version": "4.5.1",
       *       "coverage.xmlreport": "4.5.1",
       *       "cryptography": "2.0.3",
       *       "ctypes": "1.1.0",
       *       "ctypes.macholib": "1.0",
       *       "decimal": "1.70",
       *       "django": "1.11.5",
       *       "django.utils.six": "1.10.0",
       *       "django_filters": "1.0.4",
       *       "http.server": "0.6"
       *     } */
      modules?: Record<string, never>;
      /** @example {
       *       "debug": true,
       *       "account_access_type": "db"
       *     } */
      config?: Record<string, never>;
    };
    TagsFilter: {
      resolution?: components['schemas']['ReportResolution'];
      time_scope_value?: components['schemas']['ReportTimeScopeValue'];
      time_scope_units?: components['schemas']['ReportTimeScopeUnits'];
    };
    Tags: {
      filter?: components['schemas']['TagsFilter'];
      /** @example [
       *       "production",
       *       "staging",
       *       "test"
       *     ] */
      data?: unknown[];
    };
    User: {
      /** @example smithj */
      username: string;
      /**
       * Format: email
       * @example smithj@mytechco.com
       */
      email: string;
    };
    UserOut: components['schemas']['User'] & {
      /**
       * Format: uuid
       * @example 57e60f90-8c0c-4bd1-87a0-2143759aae1c
       */
      uuid: string;
    };
    UserSettings: {
      currency?: string;
      cost_type?: string;
    };
    UserSetting: {
      setting?: string;
    };
    CPURequestOptimisedNotification: {
      323004?: {
        /** @example 323004 */
        code?: number;
        /** @example Workload is optimised wrt CPU REQUESTS, no changes needed */
        message?: string;
        /** @example notice */
        type?: string;
      };
    };
    CPULimitOptimisedNotification: {
      323005?: {
        /** @example 323005 */
        code?: number;
        /** @example Workload is optimised wrt CPU LIMITS, no changes needed */
        message?: string;
        /** @example notice */
        type?: string;
      };
    };
    MemoryRequestOptimisedNotification: {
      324003?: {
        /** @example 324003 */
        code?: number;
        /** @example Workload is optimised wrt MEMORY REQUESTS, no changes needed */
        message?: string;
        /** @example notice */
        type?: string;
      };
    };
    MemoryLimitOptimisedNotification: {
      324004?: {
        /** @example 324004 */
        code?: number;
        /** @example Workload is optimised wrt MEMORY LIMITS, no changes needed */
        message?: string;
        /** @example notice */
        type?: string;
      };
    };
    NilNotification: Record<string, never>;
    CostRecommendation: {
      config?: {
        limits?: {
          cpu?: {
            /** @example 5 */
            amount?: number;
            /** @example null */
            format?: string | null;
          };
          memory?: {
            /** @example 6700 */
            amount?: number;
            /** @example Mi */
            format?: string;
          };
        };
        requests?: {
          cpu?: {
            /** @example 3 */
            amount?: number;
            /** @example null */
            format?: string | null;
          };
          memory?: {
            /** @example 700 */
            amount?: number;
            /** @example Mi */
            format?: string;
          };
        };
      };
      notifications?:
        | components['schemas']['CPURequestOptimisedNotification']
        | components['schemas']['CPULimitOptimisedNotification']
        | components['schemas']['MemoryRequestOptimisedNotification']
        | components['schemas']['MemoryLimitOptimisedNotification']
        | components['schemas']['NilNotification'];
      variation?: {
        limits?: {
          cpu?: {
            /**
             * Format: float
             * @example 94.12
             */
            amount?: number;
            /** @example percent */
            format?: string;
          };
          memory?: {
            /**
             * Format: float
             * @example 40
             */
            amount?: number;
            /** @example percent */
            format?: string;
          };
        };
        requests?: {
          cpu?: {
            /**
             * Format: float
             * @example 22
             */
            amount?: number;
            /** @example null */
            format?: string | null;
          };
          memory?: {
            /**
             * Format: float
             * @example 45
             */
            amount?: number;
            /** @example Mi */
            format?: string;
          };
        };
      };
    };
    PerformanceRecommendation: {
      config?: {
        limits?: {
          cpu?: {
            /** @example 622 */
            amount?: number;
            /** @example m */
            format?: string | null;
          };
          memory?: {
            /** @example 500 */
            amount?: number;
            /** @example Mi */
            format?: string;
          };
        };
        requests?: {
          cpu?: {
            /** @example 3.92 */
            amount?: number;
            /** @example null */
            format?: string | null;
          };
          memory?: {
            /** @example 6000 */
            amount?: number;
            /** @example Mi */
            format?: string;
          };
        };
      };
      notifications?:
        | components['schemas']['CPURequestOptimisedNotification']
        | components['schemas']['CPULimitOptimisedNotification']
        | components['schemas']['MemoryRequestOptimisedNotification']
        | components['schemas']['MemoryLimitOptimisedNotification']
        | components['schemas']['NilNotification'];
      variation?: {
        limits?: {
          cpu?: {
            /**
             * Format: float
             * @example -94
             */
            amount?: number;
            /** @example percent */
            format?: string;
          };
          memory?: {
            /**
             * Format: float
             * @example 60
             */
            amount?: number;
            /** @example percent */
            format?: string;
          };
        };
        requests?: {
          cpu?: {
            /**
             * Format: float
             * @example 20
             */
            amount?: number;
            /** @example null */
            format?: string | null;
          };
          memory?: {
            /**
             * Format: float
             * @example 40
             */
            amount?: number;
            /** @example Mi */
            format?: string;
          };
        };
      };
    };
    LongTermRecommendation: {
      /**
       * Format: float
       * @example 360.2
       */
      duration_in_hours?: number;
      /**
       * Format: date-time
       * @example 2023-06-02T00:45:00Z
       */
      monitoring_start_time?: string;
      recommendation_engines?: {
        cost?: components['schemas']['CostRecommendation'];
        performance?: components['schemas']['PerformanceRecommendation'];
      };
    };
    MediumTermRecommendation: {
      /**
       * Format: float
       * @example 168.1
       */
      duration_in_hours?: number;
      /**
       * Format: date-time
       * @example 2023-06-02T00:45:00Z
       */
      monitoring_start_time?: string;
      recommendation_engines?: {
        cost?: components['schemas']['CostRecommendation'];
        performance?: components['schemas']['PerformanceRecommendation'];
      };
    };
    ShortTermRecommendation: {
      /**
       * Format: float
       * @example 24.7
       */
      duration_in_hours?: number;
      /**
       * Format: date-time
       * @example 2023-06-02T00:45:00Z
       */
      monitoring_start_time?: string;
      recommendation_engines?: {
        cost?: components['schemas']['CostRecommendation'];
        performance?: components['schemas']['PerformanceRecommendation'];
      };
    };
    Recommendations: {
      /** @example test_cost_ocp_ros_3c462dbe */
      cluster_alias?: string;
      /** @example d29c4b8b-f1a8-471c-ab95-b64e36bb51a9 */
      cluster_uuid?: string;
      /** @example pod-ros-A11 */
      container?: string;
      /** @example 721eb376-13a9-43ab-868e-755aa1ce7f2a */
      id?: string;
      /**
       * Format: date-time
       * @example 2023-04-18T15:48:54.000Z
       */
      last_reported?: string;
      /** @example project-ros-A1 */
      project?: string;
      recommendations?: {
        current?: {
          limits?: {
            cpu?: {
              /** @example 2 */
              amount?: number;
              /** @example null */
              format?: string | null;
            };
            memory?: {
              /** @example 30.715 */
              amount?: number;
              /** @example Mi */
              format?: string;
            };
          };
          requests?: {
            cpu?: {
              /** @example 2 */
              amount?: number;
              /** @example null */
              format?: string | null;
            };
            memory?: {
              /** @example 20.391 */
              amount?: number;
              /** @example Mi */
              format?: string;
            };
          };
        };
        /** Format: date-time */
        monitoring_end_time?: string;
        recommendation_terms?: {
          long_term?: components['schemas']['LongTermRecommendation'];
          medium_term?: components['schemas']['MediumTermRecommendation'];
          short_term?: components['schemas']['ShortTermRecommendation'];
        };
      };
      /** @example 0920ff0d-f1d6-4fe2-8bf3-18e6074bd27b */
      source_id?: string;
      /** @example pod-ros-A11 */
      workload?: string;
      /** @example deploymentconfig */
      workload_type?: string;
    };
    RecommendationList: {
      data?: components['schemas']['Recommendations'][];
      meta?: {
        count?: number;
        limit?: number;
        offset?: number;
      };
      links?: {
        first?: string;
        previous?: string;
        next?: string;
        last?: string;
      };
    };
    /**
     * Format: float
     * @example 0.05
     */
    cpuUsageFloatComponent: number;
    cpuUsage: {
      /** @example cores */
      format?: string;
      max?: components['schemas']['cpuUsageFloatComponent'];
      median?: components['schemas']['cpuUsageFloatComponent'];
      min?: components['schemas']['cpuUsageFloatComponent'];
      q1?: components['schemas']['cpuUsageFloatComponent'];
      q3?: components['schemas']['cpuUsageFloatComponent'];
    };
    /**
     * Format: float
     * @example 238.2
     */
    memoryUsageFloatComponent: number;
    memoryUsage: {
      /** @example MiB */
      format?: string;
      max?: components['schemas']['memoryUsageFloatComponent'];
      median?: components['schemas']['memoryUsageFloatComponent'];
      min?: components['schemas']['memoryUsageFloatComponent'];
      q1?: components['schemas']['memoryUsageFloatComponent'];
      q3?: components['schemas']['memoryUsageFloatComponent'];
    };
    PlotDetails: {
      '2023-04-01T06:00:00Z'?: {
        cpuUsage?: components['schemas']['cpuUsage'];
        memoryUsage?: components['schemas']['memoryUsage'];
      };
      '2023-04-01T12:00:00Z'?: {
        cpuUsage?: components['schemas']['cpuUsage'];
        memoryUsage?: components['schemas']['memoryUsage'];
      };
      '2023-04-01T18:00:00Z'?: {
        cpuUsage?: components['schemas']['cpuUsage'];
        memoryUsage?: components['schemas']['memoryUsage'];
      };
      '2023-04-02T00:00:00Z'?: Record<string, never>;
    };
    PlotsData: {
      /** @example 4 */
      datapoints?: number;
      plots_data?: components['schemas']['PlotDetails'];
    };
    LongTermRecommendationBoxPlots: {
      /**
       * Format: float
       * @example 360.2
       */
      duration_in_hours?: number;
      /**
       * Format: date-time
       * @example 2023-06-02T00:45:00Z
       */
      monitoring_start_time?: string;
      plots?: components['schemas']['PlotsData'];
      recommendation_engines?: {
        cost?: components['schemas']['CostRecommendation'];
        performance?: components['schemas']['PerformanceRecommendation'];
      };
    };
    MediumTermRecommendationBoxPlots: {
      /**
       * Format: float
       * @example 168.1
       */
      duration_in_hours?: number;
      /**
       * Format: date-time
       * @example 2023-06-02T00:45:00Z
       */
      monitoring_start_time?: string;
      plots?: components['schemas']['PlotsData'];
      recommendation_engines?: {
        cost?: components['schemas']['CostRecommendation'];
        performance?: components['schemas']['PerformanceRecommendation'];
      };
    };
    ShortTermRecommendationBoxPlots: {
      /**
       * Format: float
       * @example 24.7
       */
      duration_in_hours?: number;
      /**
       * Format: date-time
       * @example 2023-06-02T00:45:00Z
       */
      monitoring_start_time?: string;
      plots?: components['schemas']['PlotsData'];
      recommendation_engines?: {
        cost?: components['schemas']['CostRecommendation'];
        performance?: components['schemas']['PerformanceRecommendation'];
      };
    };
    RecommendationBoxPlots: {
      /** @example test_cost_ocp_ros_3c462dbe */
      cluster_alias?: string;
      /** @example d29c4b8b-f1a8-471c-ab95-b64e36bb51a9 */
      cluster_uuid?: string;
      /** @example pod-ros-A11 */
      container?: string;
      /** @example 721eb376-13a9-43ab-868e-755aa1ce7f2a */
      id?: string;
      /**
       * Format: date-time
       * @example 2023-04-18T15:48:54.000Z
       */
      last_reported?: string;
      /** @example project-ros-A1 */
      project?: string;
      recommendations?: {
        current?: {
          limits?: {
            cpu?: {
              /** @example 2 */
              amount?: number;
              /** @example null */
              format?: string | null;
            };
            memory?: {
              /** @example 30.715 */
              amount?: number;
              /** @example Mi */
              format?: string;
            };
          };
          requests?: {
            cpu?: {
              /** @example 2 */
              amount?: number;
              /** @example null */
              format?: string | null;
            };
            memory?: {
              /** @example 20.391 */
              amount?: number;
              /** @example Mi */
              format?: string;
            };
          };
        };
        /** Format: date-time */
        monitoring_end_time?: string;
        recommendation_terms?: {
          long_term?: components['schemas']['LongTermRecommendationBoxPlots'];
          medium_term?: components['schemas']['MediumTermRecommendationBoxPlots'];
          short_term?: components['schemas']['ShortTermRecommendationBoxPlots'];
        };
      };
      /** @example 0920ff0d-f1d6-4fe2-8bf3-18e6074bd27b */
      source_id?: string;
      /** @example pod-ros-A11 */
      workload?: string;
      /** @example deploymentconfig */
      workload_type?: string;
    };
  };
  responses: never;
  parameters: {
    /** @description String to indicate cost type in report */
    CostType: ComponentsParametersCostType;
    /** @description String to indicate org unit id */
    OrganizationFilter: components['schemas']['OrganizationFilter'];
    /** @description Option to include delta values in the report. This shows the increase/decrease of cost or usage metrics between current and last month */
    QueryDelta: string;
    /** @description String to indicate end date of date range. */
    QueryEndDate: string;
    /**
     * @description The excludes to apply to the report as a URL encoded dictionary. The syntax is exclude[parameter]=value except for tags, which use exclude[tag:key]=value.
     * @example {
     *       "project": "*"
     *     }
     */
    QueryExclude: Record<string, never>;
    /**
     * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
     * @example {
     *       "enabled": false
     *     }
     */
    QueryFilter: Record<string, never>;
    /**
     * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
     * @example {
     *       "tag:my_tag": "*"
     *     }
     */
    QueryGroupBy: Record<string, never>;
    /**
     * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
     * @example {
     *       "usage": "desc"
     *     }
     */
    QueryOrderBy: Record<string, never>;
    /** @description Parameter for selecting the offset of data. */
    QueryOffset: number;
    /** @description Parameter for selecting the amount of data in a returned. */
    QueryLimit: number;
    /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
    ReportQueryLimit: number;
    /** @description Flag to indicate whether or not only the tag key values will be returned. */
    QueryKeyOnly: boolean;
    /** @description String to indicate start date of date range. */
    QueryStartDate: string;
    /** @description String to identify user access permission type (i.e. AWS, cost_model). */
    QueryType: string;
    /** @description Parameter for matching on a key using a contains. */
    QuerySearch: string;
    /** @description Parameter for matching on a key using a contains. */
    QueryKey: string;
    /** @description Parameter for matching the value data using a contains. */
    QueryValue: string;
    /** @description Parameter for matching the account data using a contains. */
    QueryAccount: string;
    /** @description Parameter for ordering the value data. */
    QueryOrder: ComponentsParametersQueryOrder;
  };
  requestBodies: {
    /** @description List of tag UUIDs */
    PutTagsBody: {
      content: {
        'application/json': {
          ids?: string[];
        };
      };
    };
    /** @description List of tag UUIDs */
    PutTagsMappingBody: {
      content: {
        'application/json': {
          ids?: string[];
        };
      };
    };
    /** @description List of project name and cost group */
    CostGroupsBody: {
      content: {
        'application/json': {
          project?: string;
          group?: string;
        }[];
      };
    };
  };
  headers: never;
  pathItems: never;
}
export type SchemaCostGroupsResponse = components['schemas']['CostGroupsResponse'];
export type SchemaCostModel = components['schemas']['CostModel'];
export type SchemaCostModelResp = components['schemas']['CostModelResp'];
export type SchemaCostModelOut = components['schemas']['CostModelOut'];
export type SchemaCostModelPagination = components['schemas']['CostModelPagination'];
export type SchemaCostTypePagination = components['schemas']['CostTypePagination'];
export type SchemaCostType = components['schemas']['CostType'];
export type SchemaCurrency = components['schemas']['Currency'];
export type SchemaCurrencies = components['schemas']['Currencies'];
export type SchemaCustomer = components['schemas']['Customer'];
export type SchemaCustomerOut = components['schemas']['CustomerOut'];
export type SchemaError = components['schemas']['Error'];
export type SchemaDependencyError = components['schemas']['DependencyError'];
export type SchemaForecast = components['schemas']['Forecast'];
export type SchemaForecastDataValueNumber = components['schemas']['ForecastDataValueNumber'];
export type SchemaForecastDataValueString = components['schemas']['ForecastDataValueString'];
export type SchemaForecastData = components['schemas']['ForecastData'];
export type SchemaMarkup = components['schemas']['Markup'];
export type SchemaPaginationMeta = components['schemas']['PaginationMeta'];
export type SchemaPaginationLinks = components['schemas']['PaginationLinks'];
export type SchemaListPagination = components['schemas']['ListPagination'];
export type SchemaMetrics = components['schemas']['Metrics'];
export type SchemaMetricsOut = components['schemas']['MetricsOut'];
export type SchemaOrganizationFilter = components['schemas']['OrganizationFilter'];
export type SchemaOrganization = components['schemas']['Organization'];
export type SchemaOrganizationPagination = components['schemas']['OrganizationPagination'];
export type SchemaUserAccessListPagination = components['schemas']['UserAccessListPagination'];
export type SchemaResourceTypeListPagination = components['schemas']['ResourceTypeListPagination'];
export type SchemaResourceTypePagination = components['schemas']['ResourceTypePagination'];
export type SchemaResourceTypeAwsCategories = components['schemas']['ResourceTypeAwsCategories'];
export type SchemaResourceTypeOut = components['schemas']['ResourceTypeOut'];
export type SchemaUserAccessTypeOut = components['schemas']['UserAccessTypeOut'];
export type SchemaResourceTypeListOut = components['schemas']['ResourceTypeListOut'];
export type SchemaSource = components['schemas']['Source'];
export type SchemaSourceIn = components['schemas']['SourceIn'];
export type SchemaSourceOut = components['schemas']['SourceOut'];
export type SchemaSourcePagination = components['schemas']['SourcePagination'];
export type SchemaIngressReportIn = components['schemas']['IngressReportIn'];
export type SchemaIngressReportOut = components['schemas']['IngressReportOut'];
export type SchemaIngressReportsPagination = components['schemas']['IngressReportsPagination'];
export type SchemaTieredRate = components['schemas']['TieredRate'];
export type SchemaTagRate = components['schemas']['TagRate'];
export type SchemaReportFilter = components['schemas']['ReportFilter'];
export type SchemaReportAzureFilter = components['schemas']['ReportAzureFilter'];
export type SchemaReportAwsec2ComputeFilter = components['schemas']['ReportAWSEC2ComputeFilter'];
export type SchemaReportOpenShiftFilter = components['schemas']['ReportOpenShiftFilter'];
export type SchemaReportOpenShiftAwsFilter = components['schemas']['ReportOpenShiftAWSFilter'];
export type SchemaReportOpenShiftAzureFilter = components['schemas']['ReportOpenShiftAzureFilter'];
export type SchemaReportGrouping = components['schemas']['ReportGrouping'];
export type SchemaReportAzureGrouping = components['schemas']['ReportAzureGrouping'];
export type SchemaReportOpenShiftGrouping = components['schemas']['ReportOpenShiftGrouping'];
export type SchemaReportOpenShiftAwsGrouping = components['schemas']['ReportOpenShiftAWSGrouping'];
export type SchemaReportOpenShiftAzureGrouping =
  components['schemas']['ReportOpenShiftAzureGrouping'];
export type SchemaReportOrdering = components['schemas']['ReportOrdering'];
export type SchemaReportAzureOrdering = components['schemas']['ReportAzureOrdering'];
export type SchemaReportAwsec2ComputeOrdering =
  components['schemas']['ReportAWSEC2ComputeOrdering'];
export type SchemaReportInventoryOpenShiftOrdering =
  components['schemas']['ReportInventoryOpenShiftOrdering'];
export type SchemaReportCostsOpenShiftOrdering =
  components['schemas']['ReportCostsOpenShiftOrdering'];
export type SchemaReportOpenShiftAwsOrdering = components['schemas']['ReportOpenShiftAWSOrdering'];
export type SchemaReportOpenShiftAzureOrdering =
  components['schemas']['ReportOpenShiftAzureOrdering'];
export type SchemaOrgUnitId = components['schemas']['OrgUnitId'];
export type SchemaReportDelta = components['schemas']['ReportDelta'];
export type SchemaReportResolution = components['schemas']['ReportResolution'];
export type SchemaReportTimeScopeUnits = components['schemas']['ReportTimeScopeUnits'];
export type SchemaReportTimeScopeValue = components['schemas']['ReportTimeScopeValue'];
export type SchemaReportResourceScope = components['schemas']['ReportResourceScope'];
export type SchemaReportValueUnit = components['schemas']['ReportValueUnit'];
export type SchemaReportMetaTotalItem = components['schemas']['ReportMetaTotalItem'];
export type SchemaReportMetaTotal = components['schemas']['ReportMetaTotal'];
export type SchemaReportPaginationMeta = components['schemas']['ReportPaginationMeta'];
export type SchemaReport = components['schemas']['Report'];
export type SchemaReportCost = components['schemas']['ReportCost'];
export type SchemaReportCosts = components['schemas']['ReportCosts'];
export type SchemaReportInstanceInventory = components['schemas']['ReportInstanceInventory'];
export type SchemaReportStorageInventory = components['schemas']['ReportStorageInventory'];
export type SchemaReportAwsec2InstanceInventory =
  components['schemas']['ReportAWSEC2InstanceInventory'];
export type SchemaReportOpenShiftAwsStorageInventory =
  components['schemas']['ReportOpenShiftAWSStorageInventory'];
export type SchemaReportOpenShiftAwsInstanceInventory =
  components['schemas']['ReportOpenShiftAWSInstanceInventory'];
export type SchemaReportOpenShiftAllStorageInventory =
  components['schemas']['ReportOpenShiftAllStorageInventory'];
export type SchemaReportOpenShiftAllInstanceInventory =
  components['schemas']['ReportOpenShiftAllInstanceInventory'];
export type SchemaReportOpenShiftAzureStorageInventory =
  components['schemas']['ReportOpenShiftAzureStorageInventory'];
export type SchemaReportOpenShiftAzureInstanceInventory =
  components['schemas']['ReportOpenShiftAzureInstanceInventory'];
export type SchemaReportOpenShiftCpu = components['schemas']['ReportOpenShiftCpu'];
export type SchemaReportOpenShiftMemory = components['schemas']['ReportOpenShiftMemory'];
export type SchemaReportOpenShiftVolume = components['schemas']['ReportOpenShiftVolume'];
export type SchemaReportOpenShiftVirtualMachine =
  components['schemas']['ReportOpenShiftVirtualMachine'];
export type SchemaSettingIn = components['schemas']['SettingIn'];
export type SchemaSettingOut = components['schemas']['SettingOut'];
export type SchemaSettingsTagsResponse = components['schemas']['SettingsTagsResponse'];
export type SchemaSettingsTagsMappingsResponse =
  components['schemas']['SettingsTagsMappingsResponse'];
export type SchemaSettingsTagsMappingsOptionsResponse =
  components['schemas']['SettingsTagsMappingsOptionsResponse'];
export type SchemaSettingsTagsEnabledLimitError =
  components['schemas']['SettingsTagsEnabledLimitError'];
export type SchemaGetAwsCategorySettings = components['schemas']['GetAwsCategorySettings'];
export type SchemaModifyKeySettingsRequestBody =
  components['schemas']['ModifyKeySettingsRequestBody'];
export type SchemaPutAccountSettingRequestBody =
  components['schemas']['PutAccountSettingRequestBody'];
export type SchemaStatus = components['schemas']['Status'];
export type SchemaTagsFilter = components['schemas']['TagsFilter'];
export type SchemaTags = components['schemas']['Tags'];
export type SchemaUser = components['schemas']['User'];
export type SchemaUserOut = components['schemas']['UserOut'];
export type SchemaUserSettings = components['schemas']['UserSettings'];
export type SchemaUserSetting = components['schemas']['UserSetting'];
export type SchemaCpuRequestOptimisedNotification =
  components['schemas']['CPURequestOptimisedNotification'];
export type SchemaCpuLimitOptimisedNotification =
  components['schemas']['CPULimitOptimisedNotification'];
export type SchemaMemoryRequestOptimisedNotification =
  components['schemas']['MemoryRequestOptimisedNotification'];
export type SchemaMemoryLimitOptimisedNotification =
  components['schemas']['MemoryLimitOptimisedNotification'];
export type SchemaNilNotification = components['schemas']['NilNotification'];
export type SchemaCostRecommendation = components['schemas']['CostRecommendation'];
export type SchemaPerformanceRecommendation = components['schemas']['PerformanceRecommendation'];
export type SchemaLongTermRecommendation = components['schemas']['LongTermRecommendation'];
export type SchemaMediumTermRecommendation = components['schemas']['MediumTermRecommendation'];
export type SchemaShortTermRecommendation = components['schemas']['ShortTermRecommendation'];
export type SchemaRecommendations = components['schemas']['Recommendations'];
export type SchemaRecommendationList = components['schemas']['RecommendationList'];
export type SchemaCpuUsageFloatComponent = components['schemas']['cpuUsageFloatComponent'];
export type SchemaCpuUsage = components['schemas']['cpuUsage'];
export type SchemaMemoryUsageFloatComponent = components['schemas']['memoryUsageFloatComponent'];
export type SchemaMemoryUsage = components['schemas']['memoryUsage'];
export type SchemaPlotDetails = components['schemas']['PlotDetails'];
export type SchemaPlotsData = components['schemas']['PlotsData'];
export type SchemaLongTermRecommendationBoxPlots =
  components['schemas']['LongTermRecommendationBoxPlots'];
export type SchemaMediumTermRecommendationBoxPlots =
  components['schemas']['MediumTermRecommendationBoxPlots'];
export type SchemaShortTermRecommendationBoxPlots =
  components['schemas']['ShortTermRecommendationBoxPlots'];
export type SchemaRecommendationBoxPlots = components['schemas']['RecommendationBoxPlots'];
export type ParameterCostType = components['parameters']['CostType'];
export type ParameterOrganizationFilter = components['parameters']['OrganizationFilter'];
export type ParameterQueryDelta = components['parameters']['QueryDelta'];
export type ParameterQueryEndDate = components['parameters']['QueryEndDate'];
export type ParameterQueryExclude = components['parameters']['QueryExclude'];
export type ParameterQueryFilter = components['parameters']['QueryFilter'];
export type ParameterQueryGroupBy = components['parameters']['QueryGroupBy'];
export type ParameterQueryOrderBy = components['parameters']['QueryOrderBy'];
export type ParameterQueryOffset = components['parameters']['QueryOffset'];
export type ParameterQueryLimit = components['parameters']['QueryLimit'];
export type ParameterReportQueryLimit = components['parameters']['ReportQueryLimit'];
export type ParameterQueryKeyOnly = components['parameters']['QueryKeyOnly'];
export type ParameterQueryStartDate = components['parameters']['QueryStartDate'];
export type ParameterQueryType = components['parameters']['QueryType'];
export type ParameterQuerySearch = components['parameters']['QuerySearch'];
export type ParameterQueryKey = components['parameters']['QueryKey'];
export type ParameterQueryValue = components['parameters']['QueryValue'];
export type ParameterQueryAccount = components['parameters']['QueryAccount'];
export type ParameterQueryOrder = components['parameters']['QueryOrder'];
export type RequestBodyPutTagsBody = components['requestBodies']['PutTagsBody'];
export type RequestBodyPutTagsMappingBody = components['requestBodies']['PutTagsMappingBody'];
export type RequestBodyCostGroupsBody = components['requestBodies']['CostGroupsBody'];
export type $defs = Record<string, never>;
export interface operations {
  getStatus: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description An object describing the server status */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Status'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getCurrency: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description An object describing the supported currencies */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Currency'];
        };
      };
      /** @description Currencies not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getCostType: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description An object describing the supported cost types */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CostTypePagination'];
        };
      };
    };
  };
  listCostModels: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Filter response on source uuid. */
        source_uuid?: string;
        /** @description Filter response on source type. */
        source_type?: string;
        /** @description Filter response on cost model name. */
        name?: string;
        /** @description Filter response on currency. */
        currency?: string;
        /** @description Filter response on cost model description. */
        description?: string;
        /** @description Order response on cost model by allowed fields. */
        ordering?: PathsCostModelsGetParametersQueryOrdering;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated list of cost model objects */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CostModelPagination'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  createCostModel: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': components['schemas']['CostModel'];
      };
    };
    responses: {
      /** @description An object describing the cost model */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CostModelOut'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getCostModel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of Cost Model to get */
        cost_model_uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A Cost Model object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CostModelOut'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  updateCostModel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of Cost Model to get */
        cost_model_uuid: string;
      };
      cookie?: never;
    };
    /** @description Update to a Cost Model */
    requestBody: {
      content: {
        'application/json': components['schemas']['CostModel'];
      };
    };
    responses: {
      /** @description A Cost Model object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CostModelOut'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  deleteCostModel: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of Cost Model to get */
        cost_model_uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Cost Model deleted */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getMetrics: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description An object describing the cost model metrics. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Metrics'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getAWSCostReports: {
    parameters: {
      query?: {
        /** @description Option to include delta values in the report. This shows the increase/decrease of cost or usage metrics between current and last month */
        delta?: components['parameters']['QueryDelta'];
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
        /** @description String to indicate cost type in report */
        cost_type?: components['parameters']['CostType'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportCost'];
          'text/csv': components['schemas']['ReportCost'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getAzureCostReports: {
    parameters: {
      query?: {
        /** @description Option to include delta values in the report. This shows the increase/decrease of cost or usage metrics between current and last month */
        delta?: components['parameters']['QueryDelta'];
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportCost'];
          'text/csv': components['schemas']['ReportCost'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftCostReports: {
    parameters: {
      query?: {
        /** @description Option to include delta values in the report. This shows the increase/decrease of cost or usage metrics between current and last month */
        delta?: components['parameters']['QueryDelta'];
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportCost'];
          'text/csv': components['schemas']['ReportCost'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getGCPCostReports: {
    parameters: {
      query?: {
        /** @description Option to include delta values in the report. This shows the increase/decrease of cost or usage metrics between current and last month */
        delta?: components['parameters']['QueryDelta'];
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportCost'];
          'text/csv': components['schemas']['ReportCost'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getAWSInstanceReports: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportInstanceInventory'];
          'text/csv': components['schemas']['ReportInstanceInventory'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getAzureInstanceReports: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportInstanceInventory'];
          'text/csv': components['schemas']['ReportInstanceInventory'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getGCPInstanceReports: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportInstanceInventory'];
          'text/csv': components['schemas']['ReportInstanceInventory'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getAWSStorageReports: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportStorageInventory'];
          'text/csv': components['schemas']['ReportStorageInventory'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getAzureStorageReports: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportStorageInventory'];
          'text/csv': components['schemas']['ReportStorageInventory'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getGCPStorageReports: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportStorageInventory'];
          'text/csv': components['schemas']['ReportStorageInventory'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getAWSEC2ComputeReports: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportAWSEC2InstanceInventory'];
          'text/csv': components['schemas']['ReportAWSEC2InstanceInventory'];
        };
      };
      /** @description Invalid query parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftComputeReports: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportOpenShiftCpu'];
          'text/csv': components['schemas']['ReportOpenShiftCpu'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftMemoryReports: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportOpenShiftMemory'];
          'text/csv': components['schemas']['ReportOpenShiftMemory'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftVolumeReports: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportOpenShiftVolume'];
          'text/csv': components['schemas']['ReportOpenShiftVolume'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftVirtualMachinesReport: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The excludes to apply to the report as a URL encoded dictionary. The syntax is exclude[parameter]=value except for tags, which use exclude[tag:key]=value.
         * @example {
         *       "project": "*"
         *     }
         */
        exclude?: components['parameters']['QueryExclude'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportOpenShiftVirtualMachine'];
          'text/csv': components['schemas']['ReportOpenShiftVirtualMachine'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftAllCostReports: {
    parameters: {
      query?: {
        /** @description Option to include delta values in the report. This shows the increase/decrease of cost or usage metrics between current and last month */
        delta?: components['parameters']['QueryDelta'];
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportCosts'];
          'text/csv': components['schemas']['ReportCosts'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftAllInventoryStorageReport: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportOpenShiftAllStorageInventory'];
          'text/csv': components['schemas']['ReportOpenShiftAllStorageInventory'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftAllInventoryInstanceReport: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportOpenShiftAllInstanceInventory'];
          'text/csv': components['schemas']['ReportOpenShiftAllInstanceInventory'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftAWSCostReports: {
    parameters: {
      query?: {
        /** @description Option to include delta values in the report. This shows the increase/decrease of cost or usage metrics between current and last month */
        delta?: components['parameters']['QueryDelta'];
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportCosts'];
          'text/csv': components['schemas']['ReportCosts'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftAWSInventoryStorageReport: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportOpenShiftAWSStorageInventory'];
          'text/csv': components['schemas']['ReportOpenShiftAWSStorageInventory'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftAWSInventoryInstanceReport: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportOpenShiftAWSInstanceInventory'];
          'text/csv': components['schemas']['ReportOpenShiftAWSInstanceInventory'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftGCPCostReports: {
    parameters: {
      query?: {
        /** @description Option to include delta values in the report. This shows the increase/decrease of cost or usage metrics between current and last month */
        delta?: components['parameters']['QueryDelta'];
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportCosts'];
          'text/csv': components['schemas']['ReportCosts'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftGCPInventoryStorageReport: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportOpenShiftAWSStorageInventory'];
          'text/csv': components['schemas']['ReportOpenShiftAWSStorageInventory'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftGCPInventoryInstanceReport: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportOpenShiftAWSInstanceInventory'];
          'text/csv': components['schemas']['ReportOpenShiftAWSInstanceInventory'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftAzureCostReports: {
    parameters: {
      query?: {
        /** @description Option to include delta values in the report. This shows the increase/decrease of cost or usage metrics between current and last month */
        delta?: components['parameters']['QueryDelta'];
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportCosts'];
          'text/csv': components['schemas']['ReportCosts'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftAzureInventoryStorageReport: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportOpenShiftAzureStorageInventory'];
          'text/csv': components['schemas']['ReportOpenShiftAzureStorageInventory'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftAzureInventoryInstanceReport: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /**
         * @description The grouping to apply to the report as a URL encoded dictionary. The syntax is group_by[parameter]=value except for tags, which use group_by[tag:key]=value.
         * @example {
         *       "tag:my_tag": "*"
         *     }
         */
        group_by?: components['parameters']['QueryGroupBy'];
        /**
         * @description The ordering to apply to the report as a URL encoded dictionary. The syntax is order_by[field]=order. Use 'asc' for ascending and 'desc' for descending.
         * @example {
         *       "usage": "desc"
         *     }
         */
        order_by?: components['parameters']['QueryOrderBy'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
        /** @description String to indicate start date of date range. */
        start_date?: components['parameters']['QueryStartDate'];
        /** @description String to indicate end date of date range. */
        end_date?: components['parameters']['QueryEndDate'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ReportOpenShiftAzureInstanceInventory'];
          'text/csv': components['schemas']['ReportOpenShiftAzureInstanceInventory'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
          'text/csv': components['schemas']['Error'];
        };
      };
    };
  };
  listIngressReports: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated list of ingress report objects */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IngressReportsPagination'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  postIngressReports: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Reports posted for particular source */
    requestBody: {
      content: {
        'application/json': components['schemas']['IngressReportIn'];
      };
    };
    responses: {
      /** @description A paginated list of ingress report objects */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IngressReportsPagination'];
        };
      };
      /** @description Invalid Input Error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getSourceIngressReports: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
      };
      header?: never;
      path: {
        /** @description ID of source to get */
        source_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Report objects for a source */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['IngressReportOut'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  listResourceTypes: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypeListPagination'];
        };
      };
    };
  };
  listResourcesAwsAccounts: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listResourcesAwsCategories: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching on a key using a contains. */
        key?: components['parameters']['QueryKey'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for matching the account data using a contains. */
        account?: components['parameters']['QueryAccount'];
        /** @description Flag to indicate whether or not only the tag key values will be returned. */
        key_only?: components['parameters']['QueryKeyOnly'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypeAwsCategories'];
        };
      };
    };
  };
  listResourcesAwsRegions: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listResourcesAwsServices: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listResourcesAwsEC2Instances: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listResourcesAwsEC2OperatingSystems: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listResourcesGcpAccounts: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listResourcesGcpProjects: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listResourcesGcpServices: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listResourcesGcpRegions: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listResourcesAwsOrgUnits: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listResourcesAzureSubGuids: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listResourcesAzureServices: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listResourcesAzureRegions: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listResourcesOpenShiftClusters: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listResourcesOpenShiftNodes: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listResourcesOpenShiftProjects: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listResourcesOpenShiftVirtualMachines: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listResourcesCostModels: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for matching the value data using a contains. */
        value?: components['parameters']['QueryValue'];
        /** @description Parameter for ordering the value data. */
        ordering?: components['parameters']['QueryOrder'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['ResourceTypePagination'];
        };
      };
    };
  };
  listUserAccess: {
    parameters: {
      query?: {
        /** @description String to identify user access permission type (i.e. AWS, cost_model). */
        type?: components['parameters']['QueryType'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description | - 200 response */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserAccessListPagination'];
        };
      };
    };
  };
  getUserSettings: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description An object describing the users current account settings */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserSettings'];
        };
      };
      /** @description User Account Settings not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getUserSetting: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of a setting to get */
        setting: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description An object describing a specific current user account setting */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['UserSetting'];
        };
      };
      /** @description User Account Setting not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  putAccountSettings: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Name of a setting to get */
        setting: string;
      };
      cookie?: never;
    };
    /** @description Modify account setting */
    requestBody: {
      content: {
        'application/json': components['schemas']['PutAccountSettingRequestBody'];
      };
    };
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  listSources: {
    parameters: {
      query?: {
        /** @description The type of source to filter for. */
        type?: string;
        /** @description The name of the source to filter for. */
        name?: string;
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated list of source objects */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SourcePagination'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getSource: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of source to get */
        source_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A Source object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SourceOut'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getSourceStats: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID of source to get */
        source_id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A Source Statistics object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getAWSS3Regions: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of available S3 regions */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': Record<string, never>;
        };
      };
    };
  };
  getAWSTagData: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /** @description Flag to indicate whether or not only the tag key values will be returned. */
        key_only?: components['parameters']['QueryKeyOnly'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Tags'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getAWSTagKeyData: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
      };
      header?: never;
      path: {
        /** @description The tag key to get */
        key: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Tags'];
        };
      };
      /** @description Invalid query parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getAzureTagData: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /** @description Flag to indicate whether or not only the tag key values will be returned. */
        key_only?: components['parameters']['QueryKeyOnly'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Tags'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getAzureTagKeyData: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
      };
      header?: never;
      path: {
        /** @description The tag key to get */
        key: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Tags'];
        };
      };
      /** @description Invalid query parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getGCPTagData: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /** @description Flag to indicate whether or not only the tag key values will be returned. */
        key_only?: components['parameters']['QueryKeyOnly'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Tags'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getGCPTagKeyData: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
      };
      header?: never;
      path: {
        /** @description The tag key to get */
        key: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Tags'];
        };
      };
      /** @description Invalid query parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftTagData: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /** @description Flag to indicate whether or not only the tag key values will be returned. */
        key_only?: components['parameters']['QueryKeyOnly'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Tags'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftTagKeyData: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
      };
      header?: never;
      path: {
        /** @description The tag key to get */
        key: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Tags'];
        };
      };
      /** @description Invalid query parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftAllTagData: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /** @description Flag to indicate whether or not only the tag key values will be returned. */
        key_only?: components['parameters']['QueryKeyOnly'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Tags'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftAllTagKeyData: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
      };
      header?: never;
      path: {
        /** @description The tag key to get */
        key: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Tags'];
        };
      };
      /** @description Invalid query parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftAWSTagData: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /** @description Flag to indicate whether or not only the tag key values will be returned. */
        key_only?: components['parameters']['QueryKeyOnly'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Tags'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftAWSTagKeyData: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
      };
      header?: never;
      path: {
        /** @description The tag key to get */
        key: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Tags'];
        };
      };
      /** @description Invalid query parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftAzureTagData: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /** @description Flag to indicate whether or not only the tag key values will be returned. */
        key_only?: components['parameters']['QueryKeyOnly'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Tags'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftAzureTagKeyData: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
      };
      header?: never;
      path: {
        /** @description The tag key to get */
        key: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Tags'];
        };
      };
      /** @description Invalid query parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftGCPTagData: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /** @description Flag to indicate whether or not only the tag key values will be returned. */
        key_only?: components['parameters']['QueryKeyOnly'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Tags'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getOpenShiftGCPTagKeyData: {
    parameters: {
      query?: {
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. Limit of 0 will return all data. */
        limit?: components['parameters']['ReportQueryLimit'];
      };
      header?: never;
      path: {
        /** @description The tag key to get */
        key: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description A paginated report object */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Tags'];
        };
      };
      /** @description Invalid query parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Not Found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getSettings: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Data driven forms components */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SettingOut'][];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  assignSettings: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Application settings that needs to stored */
    requestBody: {
      content: {
        'application/json': components['schemas']['SettingIn'];
      };
    };
    responses: {
      /** @description Settings successfully stored */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid Input Error */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getAwsCategoryKeysSettings: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description New api endpoint for retrieving aws category keys. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['GetAwsCategorySettings'][];
        };
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  putEnableAwsCategoryKeysSettings: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Enable aws category key by uuid */
    requestBody: {
      content: {
        'application/json': components['schemas']['ModifyKeySettingsRequestBody'];
      };
    };
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  putDisableAwsCategoryKeysSettings: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Disable aws category key by uuid */
    requestBody: {
      content: {
        'application/json': components['schemas']['ModifyKeySettingsRequestBody'];
      };
    };
    responses: {
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getSettingsCostGroups: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /**
         * @description The filter to apply to the report as a URL encoded dictionary. The syntax is filter[parameter]=value except for tags, which use filter[tag:key]=value.
         * @example {
         *       "enabled": false
         *     }
         */
        filter?: components['parameters']['QueryFilter'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OpenShift projects and the current cost group */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['CostGroupsResponse'];
        };
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  putSettingsCostGroups: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: components['requestBodies']['CostGroupsBody'];
    responses: {
      /** @description Cost groups updated */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  putSettingsCostGroupsRemove: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: components['requestBodies']['CostGroupsBody'];
    responses: {
      /** @description Cost groups updated */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad Request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getSettingsTags: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Cloud provider type */
        source_type?: string;
        /** @description Enable state of the tag */
        enabled?: boolean;
        /** @description Field(s) used to sort results. Add a '-' prefix for descending order. */
        order_by?: string[];
        /** @description UUID of a tag entry */
        uuid?: string[];
        /** @description Case insensitive search of key values. One or more key parameters may be provided. */
        key?: string[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returned tags sucessfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SettingsTagsResponse'];
        };
      };
      /** @description Invalid request parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  putSettingsTagsEnable: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: components['requestBodies']['PutTagsBody'];
    responses: {
      /** @description Successfully changed. No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid request parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Request would exceed enabled tags limit */
      412: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SettingsTagsEnabledLimitError'];
        };
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  putSettingsTagsDisable: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: components['requestBodies']['PutTagsBody'];
    responses: {
      /** @description Successfully changed. No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid request parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getSettingsTagsMappings: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Cloud provider type */
        source_type?: string;
        /** @description parent key value */
        parent?: string;
        /** @description child key value */
        child?: string;
        /** @description Field(s) used to sort results. Add a '-' prefix for descending order. */
        order_by?: string[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returned tags sucessfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SettingsTagsMappingsResponse'];
        };
      };
      /** @description Invalid request parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getSettingsTagsMappingsParent: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Cloud provider type */
        source_type?: string;
        /** @description parent key value */
        parent?: string;
        /** @description child key value */
        child?: string;
        /** @description Field(s) used to sort results. Add a '-' prefix for descending order. */
        order_by?: string[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returned tags sucessfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SettingsTagsMappingsOptionsResponse'];
        };
      };
      /** @description Invalid request parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  putSettingsTagsMappingsParentRemove: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: components['requestBodies']['PutTagsBody'];
    responses: {
      /** @description Successfully changed. No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid request parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getSettingsTagsMappingsChild: {
    parameters: {
      query?: {
        /** @description Parameter for selecting the offset of data. */
        offset?: components['parameters']['QueryOffset'];
        /** @description Parameter for selecting the amount of data in a returned. */
        limit?: components['parameters']['QueryLimit'];
        /** @description Cloud provider type */
        source_type?: string;
        /** @description parent key value */
        parent?: string;
        /** @description child key value */
        child?: string;
        /** @description Field(s) used to sort results. Add a '-' prefix for descending order. */
        order_by?: string[];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returned tags sucessfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['SettingsTagsMappingsOptionsResponse'];
        };
      };
      /** @description Invalid request parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  putSettingsTagsMappingsChildRemove: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: components['requestBodies']['PutTagsBody'];
    responses: {
      /** @description Successfully changed. No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid request parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  putSettingsTagsMappingsParent: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: components['requestBodies']['PutTagsMappingBody'];
    responses: {
      /** @description Successfully changed. No content */
      204: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid request parameter */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unauthorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Unexpected Error */
      500: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['Error'];
        };
      };
    };
  };
  getRecommendationList: {
    parameters: {
      query?: {
        /** @description Cluster alias or UUID */
        cluster?: string;
        /** @description Options are daemonset, deployment, deploymentconfig, replicaset, replicationcontroller, statefulset */
        workload_type?: string;
        /** @description Workload name */
        workload?: string;
        /** @description Container name */
        container?: string;
        /** @description Project name */
        project?: string;
        /** @description Shows all values in true/real-world units. Accepts 1, t, T, TRUE, true, True, 0, f, F, FALSE, false, False. */
        'true-units'?: boolean;
        /**
         * @description Start date
         * @example YYYY-MM-DD
         */
        start_date?: string;
        /**
         * @description End date
         * @example YYYY-MM-DD
         */
        end_date?: string;
        /** @description Pagination offset */
        offset?: number;
        /** @description Pagination limit */
        limit?: number;
        /** @description Options are cluster, project, workload_type, workload, container, last_reported */
        order_by?: string;
        /** @description Options are ASC, DESC */
        order_how?: string;
        /** @description unit preference for memory */
        'memory-unit'?: PathsRecommendationsOpenshiftGetParametersQueryMemoryUnit;
        /** @description unit preference for cpu */
        'cpu-unit'?: PathsRecommendationsOpenshiftGetParametersQueryCpuUnit;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': components['schemas']['RecommendationList'];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/plain': string;
        };
      };
    };
  };
  getRecommendationById: {
    parameters: {
      query?: {
        /** @description Shows all values in true/real-world units. Accepts 1, t, T, TRUE, true, True, 0, f, F, FALSE, false, False. */
        'true-units'?: boolean;
        /** @description unit preference for memory */
        'memory-unit'?: PathsRecommendationsOpenshiftRecommendationIdGetParametersQueryMemoryUnit;
        /** @description unit preference for cpu */
        'cpu-unit'?: PathsRecommendationsOpenshiftRecommendationIdGetParametersQueryCpuUnit;
      };
      header?: never;
      path: {
        /** @description The recommendation UUID */
        'recommendation-id': string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json; charset=UTF-8': components['schemas']['RecommendationBoxPlots'];
        };
      };
      /** @description User is not authorized */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'text/plain': string;
        };
      };
    };
  };
}
export enum PathsCostModelsGetParametersQueryOrdering {
  name = 'name',
  ValueMinusname = '-name',
  source_type = 'source_type',
  ValueMinussource_type = '-source_type',
  updated_timestamp = 'updated_timestamp',
  ValueMinusupdated_timestamp = '-updated_timestamp',
}
export enum PathsRecommendationsOpenshiftGetParametersQueryMemoryUnit {
  bytes = 'bytes',
  MiB = 'MiB',
  GiB = 'GiB',
}
export enum PathsRecommendationsOpenshiftGetParametersQueryCpuUnit {
  millicores = 'millicores',
  cores = 'cores',
}
export enum PathsRecommendationsOpenshiftRecommendationIdGetParametersQueryMemoryUnit {
  bytes = 'bytes',
  MiB = 'MiB',
  GiB = 'GiB',
}
export enum PathsRecommendationsOpenshiftRecommendationIdGetParametersQueryCpuUnit {
  millicores = 'millicores',
  cores = 'cores',
}
export enum CostModelDistribution {
  memory = 'memory',
  cpu = 'cpu',
}
export enum CostModelRespDistribution {
  memory = 'memory',
  cpu = 'cpu',
}
export enum MarkupUnit {
  percent = 'percent',
}
export enum TieredRateCost_type {
  Infrastructure = 'Infrastructure',
  Supplementary = 'Supplementary',
}
export enum TieredRateTiered_ratesUnit {
  USD = 'USD',
}
export enum TagRateCost_type {
  Infrastructure = 'Infrastructure',
  Supplementary = 'Supplementary',
}
export enum TagRateTag_ratesTag_key {
  key_one = 'key_one',
}
export enum TagRateTag_ratesTag_valuesUnit {
  USD = 'USD',
}
export enum ReportAWSEC2ComputeFilterTime_scope_value {
  ValueMinus1 = -1,
  ValueMinus2 = -2,
  ValueMinus3 = -3,
}
export enum ReportOrderingInfrastructure {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOrderingSupplementary {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOrderingCost {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOrderingUsage {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOrderingDelta {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOrderingAccount_alias {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOrderingRegion {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOrderingService {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportAzureOrderingInfrastructure {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportAzureOrderingSupplementary {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportAzureOrderingCost {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportAzureOrderingUsage {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportAzureOrderingDelta {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportAzureOrderingSubscription_guid {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportAzureOrderingResource_location {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportAzureOrderingService_name {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportAzureOrderingInstance_type {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportAWSEC2ComputeOrderingCost {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportAWSEC2ComputeOrderingUsage {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportAWSEC2ComputeOrderingAccount {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportAWSEC2ComputeOrderingOperating_system {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportAWSEC2ComputeOrderingResource_id {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportAWSEC2ComputeOrderingInstance_name {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportAWSEC2ComputeOrderingInstance_type {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportInventoryOpenShiftOrderingCluster {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportInventoryOpenShiftOrderingProject {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportInventoryOpenShiftOrderingNode {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportInventoryOpenShiftOrderingUsage {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportInventoryOpenShiftOrderingRequest {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportInventoryOpenShiftOrderingInfrastructure {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportInventoryOpenShiftOrderingSupplementary {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportInventoryOpenShiftOrderingCost {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportInventoryOpenShiftOrderingLimit {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportCostsOpenShiftOrderingCluster {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportCostsOpenShiftOrderingProject {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportCostsOpenShiftOrderingNode {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportCostsOpenShiftOrderingInfrastructure {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportCostsOpenShiftOrderingSupplementary {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportCostsOpenShiftOrderingCost {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAWSOrderingInfrastructure {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAWSOrderingSupplementary {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAWSOrderingCost {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAWSOrderingUsage {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAWSOrderingDelta {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAWSOrderingAccount_alias {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAWSOrderingRegion {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAWSOrderingService {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAWSOrderingCluster {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAWSOrderingProject {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAWSOrderingNode {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAzureOrderingInfrastructure {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAzureOrderingSupplementary {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAzureOrderingCost {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAzureOrderingUsage {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAzureOrderingDelta {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAzureOrderingSubscription_guid {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAzureOrderingResource_location {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAzureOrderingService_name {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAzureOrderingInstance_type {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAzureOrderingCluster {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAzureOrderingProject {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportOpenShiftAzureOrderingNode {
  asc = 'asc',
  desc = 'desc',
}
export enum ReportResolution {
  daily = 'daily',
  monthly = 'monthly',
}
export enum ReportTimeScopeUnits {
  day = 'day',
  month = 'month',
}
export enum ReportTimeScopeValue {
  ValueMinus1 = -1,
  ValueMinus2 = -2,
  ValueMinus10 = -10,
  ValueMinus30 = -30,
}
export enum ReportResourceScope {
  EC2 = 'EC2',
  EBS = 'EBS',
  EFS = 'EFS',
  S3 = 'S3',
}
export enum ComponentsParametersCostType {
  unblended_cost = 'unblended_cost',
  blended_cost = 'blended_cost',
  savingsplan_effective_cost = 'savingsplan_effective_cost',
}
export enum ComponentsParametersQueryOrder {
  value = 'value',
  ValueMinusvalue = '-value',
}
