/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/accounts_mgmt/v1/access_token': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Return access token generated from registries in docker format */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description access token from registries in docker format */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AccessTokenCfg'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Cannot find registry */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/accounts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of accounts */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
          /** @description Supplies a comma-separated list of fields to be returned.
           *     Fields of sub-structures and of arrays use <structure>.<field> notation.
           *     <stucture>.* means all field of a structure
           *     Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)
           *
           *     ```
           *     ocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true
           *     ``` */
          fields?: components['parameters']['fields'];
          /** @description If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. */
          fetchLabels?: components['parameters']['fetchLabels'];
          /** @description If true, includes the capabilities on a subscription in the output. Could slow request response time. */
          fetchCapabilities?: components['parameters']['fetchCapabilities'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of account objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AccountList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new account */
    post: {
      parameters: {
        query?: {
          /** @description If true, instructs API to avoid making any changes, but rather run through validations only. */
          dryRun?: components['parameters']['dryRun'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Account data */
      requestBody: {
        content: {
          'application/json': components['schemas']['Account'];
        };
      };
      responses: {
        /** @description Account can be created without dryRun parameter */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Account'];
          };
        };
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Account'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Account already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating the account */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/accounts/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** Get an account by id */
    get: {
      parameters: {
        query?: {
          /** @description If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. */
          fetchLabels?: components['parameters']['fetchLabels'];
          /** @description If true, includes the capabilities on a subscription in the output. Could slow request response time. */
          fetchCapabilities?: components['parameters']['fetchCapabilities'];
          /** @description If true, includes the RHIT account_id in the output. Could slow request response time. */
          fetchRhit?: components['parameters']['fetchRhit'];
        };
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Account found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Account'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No account with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete an account by id */
    delete: {
      parameters: {
        query?: {
          /** @description If true, deletes the associated resources (e.g. role bindings) for an account along with the account itself */
          deleteAssociatedResources?: components['parameters']['deleteAssociatedResources'];
        };
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Account successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No account with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Update an account */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      /** @description Updated account data */
      requestBody: {
        content: {
          'application/json': components['schemas']['AccountPatchRequest'];
        };
      };
      responses: {
        /** @description Account updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Account'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No account with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Account already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error updating account */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/accounts_mgmt/v1/accounts/{id}/labels': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of labels */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
        };
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of label */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['LabelList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new label or update an existing label */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      /** @description Label data */
      requestBody: {
        content: {
          'application/json': components['schemas']['Label'];
        };
      };
      responses: {
        /** @description Created or updated label successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Label'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating the label */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/accounts/{id}/labels/{key}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
        /** @description The key of the label */
        key: components['parameters']['key'];
      };
      cookie?: never;
    };
    /** Get account labels by label key */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
          /** @description The key of the label */
          key: components['parameters']['key'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Labels found by key */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Label'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No label with specified key on specified account id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete a label */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
          /** @description The key of the label */
          key: components['parameters']['key'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Label successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No label with specified key on specified account id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the label */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Create a new label or update an existing label */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
          /** @description The key of the label */
          key: components['parameters']['key'];
        };
        cookie?: never;
      };
      /** @description Label data */
      requestBody: {
        content: {
          'application/json': components['schemas']['Label'];
        };
      };
      responses: {
        /** @description Created or updated label successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Label'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Label already exists and cannot be updated */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error updating account label */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/accounts_mgmt/v1/accounts/{id}/pull_secret_rotation': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** List of pull secrets rotation */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
        };
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description existing pull secret rotation list */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['PullSecretRotationList'];
          };
        };
        /** @description PullSecretRotation does not exist */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Initiate pull secret rotation for this account id */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      /** @description The contents of the pull secret rotation creation request */
      requestBody?: {
        content: {
          'application/json': components['schemas']['PullSecretRotationRequest'];
        };
      };
      responses: {
        /** @description the pull secret rotation request has been created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['PullSecretRotation'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/accounts/{id}/pull_secret_rotation/{rotationId}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
        /** @description The id of the pull secret rotation */
        rotationId: components['parameters']['rotationId'];
      };
      cookie?: never;
    };
    /** Get a pull secret rotation by id for a specific account */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
          /** @description The id of the pull secret rotation */
          rotationId: components['parameters']['rotationId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Pull secret rotation found by id for this account id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['PullSecretRotation'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No pull secret rotation record with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete a single Pull Secret Rotation record */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
          /** @description The id of the pull secret rotation */
          rotationId: components['parameters']['rotationId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Pull Secret Rotation record successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No Pull Secret Rotation record with specified id on specified account id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the pull secret rotation record */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/billing_models': {
    parameters: {
      query?: {
        /** @description Page number of record list when record list exceeds specified page size */
        page?: components['parameters']['page'];
        /** @description Maximum number of records to return */
        size?: components['parameters']['size'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of available billing models */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of billing model objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['BillingModelList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/billing_models/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** Get a billing model */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Billing model found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['BillingModel'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No billing model with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/capabilities': {
    parameters: {
      query?: {
        /** @description Page number of record list when record list exceeds specified page size */
        page?: components['parameters']['page'];
        /** @description Maximum number of records to return */
        size?: components['parameters']['size'];
        /** @description Specifies the search criteria. The syntax of this parameter is
         *     similar to the syntax of the _where_ clause of an SQL statement,
         *     using the names of the json attributes / column names of the account.
         *     For example, in order to retrieve all the accounts with a username starting with `my`:
         *
         *     ```sql
         *     username like 'my%'
         *     ```
         *
         *     > **Important Note**:
         *     Account Management Service uses **KSUID** as an **ID** field.
         *     KSUID contains a timestamp component that allows them to be sorted by generation time.
         *     As this field uses an index, please use it to sort by instead of `created_at` field.
         *
         *     The search criteria can also be applied on related resource.
         *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
         *
         *     ```sql
         *     labels.key = 'foo' and labels.value = 'bar'
         *     ```
         *
         *     If the parameter isn't provided, or if the value is empty, then
         *     all the accounts that the user has permission to see will be
         *     returned. */
        search?: components['parameters']['search'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of available capabilities */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of capability objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['CapabilityList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/certificates': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Fetch certificates of a particular type */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description # The payload depends on sca as the requested certificates.
       *       The `type` field is now deprecated and will now be defaulted to `sca` type.
       *     * {"arch": "x86_64"}
       *      */
      requestBody: {
        content: {
          'application/json': components['schemas']['CertificatesRequest'];
        };
      };
      responses: {
        /** @description The certificate associated with the organization */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Certificate'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description The certificate is not avaialbe for the organization */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/cloud_resources': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of cloud resources */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of cloud resource objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['CloudResourceList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new cloud resource */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Cloud resource data */
      requestBody: {
        content: {
          'application/json': components['schemas']['CloudResource'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['CloudResource'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Resource already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating resource */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/cloud_resources/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** Get a cloud resource */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Cloud resource found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['CloudResource'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No cloud resource with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete a cloud resource */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Cloud resource successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No resource with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the resource */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Update a cloud resource */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      /** @description Updated cloud resource data */
      requestBody: {
        content: {
          'application/json': components['schemas']['CloudResource'];
        };
      };
      responses: {
        /** @description Cloud resource updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['CloudResource'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No resource with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error updating resource */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/accounts_mgmt/v1/cluster_authorizations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Authorizes new cluster creation against an exsiting RH Subscription. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Cluster and authorization data */
      requestBody: {
        content: {
          'application/json': components['schemas']['ClusterAuthorizationRequest'];
        };
      };
      responses: {
        /** @description The authorization is successful, the requested cluster has a valid subscription and is within resource limits. */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ClusterAuthorizationResponse'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description AMS subscription exists but is associated with another account */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description The limits for this subscription are exceeded. */
        429: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Other cluster authorization error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/cluster_registrations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Finds or creates a cluster registration with a registy credential token and cluster ID */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Cluster and authorization data */
      requestBody: {
        content: {
          'application/json': components['schemas']['ClusterRegistrationRequest'];
        };
      };
      responses: {
        /** @description A cluster with the specified cluster_id exists and belongs to the user with the specified registry credential token */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ClusterRegistrationResponse'];
          };
        };
        /** @description No cluster with the specified cluster exists, one was successfully created and associated with the account with the specified registry credential token */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ClusterRegistrationResponse'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Registry credential token is invalid */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Cluster with specified cluster_id already associated with another user */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description cluster_id provided is invalid */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Too many clusters have been associated with this user recently */
        429: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Other cluster registration error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/cluster_transfers': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** List cluster transfers - returns either an empty result set or a valid ClusterTransfer instance that is within a valid transfer window. */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description cluster transfer detected */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ClusterTransferList'];
          };
        };
        /** @description ClusterTransfer does not exist for a specific cluster */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Initiate cluster transfer. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description The contents of the cluster transfer creation request */
      requestBody: {
        content: {
          'application/json': components['schemas']['ClusterTransferRequest'];
        };
      };
      responses: {
        /** @description the cluster transfer has been created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ClusterTransfer'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/cluster_transfers/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update specific cluster transfer */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      /** @description Updated cluster transfer */
      requestBody: {
        content: {
          'application/json': components['schemas']['ClusterTransferPatchRequest'];
        };
      };
      responses: {
        /** @description Cluster transfer updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ClusterTransfer'];
          };
        };
        /** @description ClusterTransfer does not exist for a specific cluster */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Request is invalid */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Conflict during cluster transfer update */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error updating cluster transfer */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/accounts_mgmt/v1/config/skus': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of skus */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of sku objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SkuList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new sku */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Sku data */
      requestBody: {
        content: {
          'application/json': components['schemas']['SKU'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SKU'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Sku already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating sku */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/config/skus/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** Get a sku */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Sku found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SKU'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No SKU with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete a sku */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Sku successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No sku with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the sku */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Update a Sku */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      /** @description Updated sku data */
      requestBody: {
        content: {
          'application/json': components['schemas']['SKU'];
        };
      };
      responses: {
        /** @description Sku updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SKU'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No sku with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error updating sku */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/accounts_mgmt/v1/current_account': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get the authenticated account */
    get: {
      parameters: {
        query?: {
          /** @description If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. */
          fetchLabels?: components['parameters']['fetchLabels'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Account found via JWT */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Account'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/default_capabilities': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of default capabilities */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of default capabilities */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['DefaultCapabilityList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new default capability or update an existing one */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Label data */
      requestBody: {
        content: {
          'application/json': components['schemas']['DefaultCapability'];
        };
      };
      responses: {
        /** @description Created or updated default capability successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['DefaultCapability'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating the default capability */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/default_capabilities/{name}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The name of the default capability */
        name: components['parameters']['name'];
      };
      cookie?: never;
    };
    /** Get default capability by label name */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The name of the default capability */
          name: components['parameters']['name'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default capability found by name */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['DefaultCapability'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No default capability with specified name exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete a default capability */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The name of the default capability */
          name: components['parameters']['name'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Default capability successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No default capability with specified name exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the default capability */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Create a new default capability or update an existing one */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The name of the default capability */
          name: components['parameters']['name'];
        };
        cookie?: never;
      };
      /** @description Default capability data */
      requestBody: {
        content: {
          'application/json': components['schemas']['DefaultCapability'];
        };
      };
      responses: {
        /** @description Created or updated default capability successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['DefaultCapability'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error updating default capability */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/accounts_mgmt/v1/deleted_subscriptions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of deleted subscriptions */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of deleted subscription objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['DeletedSubscriptionList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/deleted_subscriptions/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** Fetches a deleted subscription by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON object of a single deleted subscription */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['DeletedSubscription'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Resource does not exist */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/entitlement_certificates': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Fetch all certificates of a sca type based on the architectures */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description # The payload depends on sca as the requested certificates.
       *       The `type` field is now deprecated and will now be defaulted to `sca` type.
       *     * {"arch": ["x86","x86_64","ppc"]}
       *      */
      requestBody: {
        content: {
          'application/json': components['schemas']['EntitlementCertificatesRequest'];
        };
      };
      responses: {
        /** @description The certificates associated with the organization */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['EntitlementCertificatesList'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description The certificate is not avaialbe for the organization */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/errors': {
    parameters: {
      query?: {
        /** @description Page number of record list when record list exceeds specified page size */
        page?: components['parameters']['page'];
        /** @description Maximum number of records to return */
        size?: components['parameters']['size'];
        /** @description Specifies the search criteria. The syntax of this parameter is
         *     similar to the syntax of the _where_ clause of an SQL statement,
         *     using the names of the json attributes / column names of the account.
         *     For example, in order to retrieve all the accounts with a username starting with `my`:
         *
         *     ```sql
         *     username like 'my%'
         *     ```
         *
         *     > **Important Note**:
         *     Account Management Service uses **KSUID** as an **ID** field.
         *     KSUID contains a timestamp component that allows them to be sorted by generation time.
         *     As this field uses an index, please use it to sort by instead of `created_at` field.
         *
         *     The search criteria can also be applied on related resource.
         *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
         *
         *     ```sql
         *     labels.key = 'foo' and labels.value = 'bar'
         *     ```
         *
         *     If the parameter isn't provided, or if the value is empty, then
         *     all the accounts that the user has permission to see will be
         *     returned. */
        search?: components['parameters']['search'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of errors */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array or errors */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ErrorList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/errors/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** Get an error by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Error found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No error with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/feature_toggles/{id}/query': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Query a feature toggle by id
     * @deprecated
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      /** @description The context of the query */
      requestBody: {
        content: {
          'application/json': components['schemas']['FeatureToggleQueryRequest'];
        };
      };
      responses: {
        /** @description Feature toggle found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['FeatureToggle'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/labels': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of labels */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of label objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['LabelList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/landing_page/self_service': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a console.redhat.com landing page content JSON schema */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description self service schema created */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SelfServiceLandingPageSchema'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/metrics': {
    parameters: {
      query?: {
        /** @description Specifies the search criteria. The syntax of this parameter is
         *     similar to the syntax of the _where_ clause of an SQL statement,
         *     using the names of the json attributes / column names of the account.
         *     For example, in order to retrieve all the accounts with a username starting with `my`:
         *
         *     ```sql
         *     username like 'my%'
         *     ```
         *
         *     > **Important Note**:
         *     Account Management Service uses **KSUID** as an **ID** field.
         *     KSUID contains a timestamp component that allows them to be sorted by generation time.
         *     As this field uses an index, please use it to sort by instead of `created_at` field.
         *
         *     The search criteria can also be applied on related resource.
         *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
         *
         *     ```sql
         *     labels.key = 'foo' and labels.value = 'bar'
         *     ```
         *
         *     If the parameter isn't provided, or if the value is empty, then
         *     all the accounts that the user has permission to see will be
         *     returned. */
        search?: components['parameters']['search'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of metrics */
    get: {
      parameters: {
        query?: {
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of metrics objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['MetricsList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/notify_details': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Get and validate notification details */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description The notification parameters such as bcc_address,cluster_id etc */
      requestBody: {
        content: {
          'application/json': components['schemas']['NotifyDetailsRequest'];
        };
      };
      responses: {
        /** @description A JSON array of Notification details with a key-value pair */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['NotifyDetailsResponseList'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No such notification details can be returned */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/organizations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of organizations */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
          /** @description If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. */
          fetchLabels?: components['parameters']['fetchLabels'];
          /** @description If true, includes the capabilities on a subscription in the output. Could slow request response time. */
          fetchCapabilities?: components['parameters']['fetchCapabilities'];
          /** @description Supplies a comma-separated list of fields to be returned.
           *     Fields of sub-structures and of arrays use <structure>.<field> notation.
           *     <stucture>.* means all field of a structure
           *     Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)
           *
           *     ```
           *     ocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true
           *     ``` */
          fields?: components['parameters']['fields'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of organization objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['OrganizationList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new organization */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Organization data */
      requestBody: {
        content: {
          'application/json': components['schemas']['Organization'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Organization'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Organization already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating the organization */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/organizations/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** Get an organization by id */
    get: {
      parameters: {
        query?: {
          /** @description If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. */
          fetchLabels?: components['parameters']['fetchLabels'];
          /** @description If true, includes the capabilities on a subscription in the output. Could slow request response time. */
          fetchCapabilities?: components['parameters']['fetchCapabilities'];
        };
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Organization found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Organization'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No organization with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /** Update an organization */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      /** @description Updated organization data */
      requestBody: {
        content: {
          'application/json': components['schemas']['OrganizationPatchRequest'];
        };
      };
      responses: {
        /** @description Organization updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Organization'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No organization with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error updating organization */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/accounts_mgmt/v1/organizations/{id}/labels': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of labels */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
        };
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of label */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['LabelList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new label or update an existing label */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      /** @description Label data */
      requestBody: {
        content: {
          'application/json': components['schemas']['Label'];
        };
      };
      responses: {
        /** @description Created or updated label successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Label'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating the label */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/organizations/{id}/labels/{key}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
        /** @description The key of the label */
        key: components['parameters']['key'];
      };
      cookie?: never;
    };
    /** Get organization labels by label key */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
          /** @description The key of the label */
          key: components['parameters']['key'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Labels found by key */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Label'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No label with specified key on specified organizations id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete a label */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
          /** @description The key of the label */
          key: components['parameters']['key'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Label successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No label with specified key on specified organizations id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the label */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Create a new label or update an existing label */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
          /** @description The key of the label */
          key: components['parameters']['key'];
        };
        cookie?: never;
      };
      /** @description Label data */
      requestBody: {
        content: {
          'application/json': components['schemas']['Label'];
        };
      };
      responses: {
        /** @description Created or updated label successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Label'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Label already exists and cannot be updated */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error updating organizations label */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/accounts_mgmt/v1/organizations/{id}/summary_dashboard': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** Returns a summary of organizations clusters based on metrics */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of metrics objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Summary'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/organizations/{orgId}/account_group_assignments': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of account group assignments for the given org */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
        };
        header?: never;
        path: {
          /** @description The id of organization */
          orgId: components['parameters']['orgId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of account groups */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AccountGroupAssignmentList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No organization with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new AccountGroupAssignment */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of organization */
          orgId: components['parameters']['orgId'];
        };
        cookie?: never;
      };
      /** @description New AccountGroup data */
      requestBody: {
        content: {
          'application/json': components['schemas']['AccountGroupAssignment'];
        };
      };
      responses: {
        /** @description Created AccountGroupAssignment successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AccountGroupAssignment'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No organization with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating the label */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/organizations/{orgId}/account_group_assignments/{acctGrpAsgnId}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of organization */
        orgId: components['parameters']['orgId'];
        /** @description The id of account group assignment */
        acctGrpAsgnId: components['parameters']['acctGrpAsgnId'];
      };
      cookie?: never;
    };
    /** Get account group assignment by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of organization */
          orgId: components['parameters']['orgId'];
          /** @description The id of account group assignment */
          acctGrpAsgnId: components['parameters']['acctGrpAsgnId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Account group assignment found */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AccountGroupAssignment'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No organization with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete an account group assignment */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of organization */
          orgId: components['parameters']['orgId'];
          /** @description The id of account group assignment */
          acctGrpAsgnId: components['parameters']['acctGrpAsgnId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Account group assignment successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No organization or account group assignment with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the account group assignment */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/organizations/{orgId}/account_groups': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of account groups for the given org */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
        };
        header?: never;
        path: {
          /** @description The id of organization */
          orgId: components['parameters']['orgId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of account groups */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AccountGroupList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No organization with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new AccountGroup */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of organization */
          orgId: components['parameters']['orgId'];
        };
        cookie?: never;
      };
      /** @description New AccountGroup data */
      requestBody: {
        content: {
          'application/json': components['schemas']['AccountGroupRequest'];
        };
      };
      responses: {
        /** @description Created AccountGroup successfully */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AccountGroup'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No organization with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating the label */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/organizations/{orgId}/account_groups/{acctGrpId}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of organization */
        orgId: components['parameters']['orgId'];
        /** @description The id of account group */
        acctGrpId: components['parameters']['acctGrpId'];
      };
      cookie?: never;
    };
    /** Get account group by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of organization */
          orgId: components['parameters']['orgId'];
          /** @description The id of account group */
          acctGrpId: components['parameters']['acctGrpId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Account group found */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AccountGroup'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No organization or account group with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete an account group */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of organization */
          orgId: components['parameters']['orgId'];
          /** @description The id of account group */
          acctGrpId: components['parameters']['acctGrpId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Account group successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No organization or account group with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the account group */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Update an account group */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of organization */
          orgId: components['parameters']['orgId'];
          /** @description The id of account group */
          acctGrpId: components['parameters']['acctGrpId'];
        };
        cookie?: never;
      };
      /** @description Updated account group data */
      requestBody: {
        content: {
          'application/json': components['schemas']['AccountGroupRequest'];
        };
      };
      responses: {
        /** @description Account group updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AccountGroup'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No account group with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error updating account group */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/accounts_mgmt/v1/organizations/{orgId}/consumed_quota': {
    parameters: {
      query?: {
        /** @description If true, includes that ConsumedQuota should be recalculated. */
        forceRecalc?: components['parameters']['forceRecalc'];
      };
      header?: never;
      path: {
        /** @description The id of organization */
        orgId: components['parameters']['orgId'];
      };
      cookie?: never;
    };
    /** Returns a list of consumed quota for an organization */
    get: {
      parameters: {
        query?: {
          /** @description If true, includes that ConsumedQuota should be recalculated. */
          forceRecalc?: components['parameters']['forceRecalc'];
        };
        header?: never;
        path: {
          /** @description The id of organization */
          orgId: components['parameters']['orgId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of ConsumedQuota objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ConsumedQuotaList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No organization with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred when getting this resource */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/organizations/{orgId}/quota_cost': {
    parameters: {
      query?: {
        /** @description Specifies the search criteria. The syntax of this parameter is
         *     similar to the syntax of the _where_ clause of an SQL statement,
         *     using the names of the json attributes / column names of the account.
         *     For example, in order to retrieve all the accounts with a username starting with `my`:
         *
         *     ```sql
         *     username like 'my%'
         *     ```
         *
         *     > **Important Note**:
         *     Account Management Service uses **KSUID** as an **ID** field.
         *     KSUID contains a timestamp component that allows them to be sorted by generation time.
         *     As this field uses an index, please use it to sort by instead of `created_at` field.
         *
         *     The search criteria can also be applied on related resource.
         *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
         *
         *     ```sql
         *     labels.key = 'foo' and labels.value = 'bar'
         *     ```
         *
         *     If the parameter isn't provided, or if the value is empty, then
         *     all the accounts that the user has permission to see will be
         *     returned. */
        search?: components['parameters']['search'];
        /** @description Page number of record list when record list exceeds specified page size */
        page?: components['parameters']['page'];
        /** @description Maximum number of records to return */
        size?: components['parameters']['size'];
        /** @description If true, includes the related resources in the output. Could slow request response time. */
        fetchRelatedResources?: components['parameters']['fetchRelatedResources'];
        /** @description If true, includes that ConsumedQuota should be recalculated. */
        forceRecalc?: components['parameters']['forceRecalc'];
        /** @description If true, includes the marketplace cloud accounts in the output. Could slow request response time. */
        fetchCloudAccounts?: components['parameters']['fetchCloudAccounts'];
      };
      header?: never;
      path: {
        /** @description The id of organization */
        orgId: components['parameters']['orgId'];
      };
      cookie?: never;
    };
    /** Returns a summary of quota cost */
    get: {
      parameters: {
        query?: {
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description If true, includes the related resources in the output. Could slow request response time. */
          fetchRelatedResources?: components['parameters']['fetchRelatedResources'];
          /** @description If true, includes that ConsumedQuota should be recalculated. */
          forceRecalc?: components['parameters']['forceRecalc'];
          /** @description If true, includes the marketplace cloud accounts in the output. Could slow request response time. */
          fetchCloudAccounts?: components['parameters']['fetchCloudAccounts'];
        };
        header?: never;
        path: {
          /** @description The id of organization */
          orgId: components['parameters']['orgId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of QuotaCost objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['QuotaCostList'];
          };
        };
        /** @description No organization with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred when getting this resource */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of resource quota objects */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
        };
        header?: never;
        path: {
          /** @description The id of organization */
          orgId: components['parameters']['orgId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of ResourceQuota objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ResourceQuotaList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No organization with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred when getting this resource */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new resource quota */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of organization */
          orgId: components['parameters']['orgId'];
        };
        cookie?: never;
      };
      /** @description Resource quota data */
      requestBody: {
        content: {
          'application/json': components['schemas']['ResourceQuotaRequest'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ResourceQuota'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description ResourceQuota already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating the resource quota */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of organization */
        orgId: components['parameters']['orgId'];
        /** @description The id of quota */
        quotaId: components['parameters']['quotaId'];
      };
      cookie?: never;
    };
    /** Get a resource quota by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of organization */
          orgId: components['parameters']['orgId'];
          /** @description The id of quota */
          quotaId: components['parameters']['quotaId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Resource quota found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ResourceQuota'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No resource quota with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred when getting this resource */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete a resource quota */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of organization */
          orgId: components['parameters']['orgId'];
          /** @description The id of quota */
          quotaId: components['parameters']['quotaId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Resource Quota successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No Resource Quota with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the Resource Quota */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Update a resource quota */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of organization */
          orgId: components['parameters']['orgId'];
          /** @description The id of quota */
          quotaId: components['parameters']['quotaId'];
        };
        cookie?: never;
      };
      /** @description Updated resource quota data */
      requestBody: {
        content: {
          'application/json': components['schemas']['ResourceQuotaRequest'];
        };
      };
      responses: {
        /** @description Resource Quota updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ResourceQuota'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No resource quota with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error updating resource quota */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/accounts_mgmt/v1/plans': {
    parameters: {
      query?: {
        /** @description Page number of record list when record list exceeds specified page size */
        page?: components['parameters']['page'];
        /** @description Maximum number of records to return */
        size?: components['parameters']['size'];
        /** @description Specifies the search criteria. The syntax of this parameter is
         *     similar to the syntax of the _where_ clause of an SQL statement,
         *     using the names of the json attributes / column names of the account.
         *     For example, in order to retrieve all the accounts with a username starting with `my`:
         *
         *     ```sql
         *     username like 'my%'
         *     ```
         *
         *     > **Important Note**:
         *     Account Management Service uses **KSUID** as an **ID** field.
         *     KSUID contains a timestamp component that allows them to be sorted by generation time.
         *     As this field uses an index, please use it to sort by instead of `created_at` field.
         *
         *     The search criteria can also be applied on related resource.
         *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
         *
         *     ```sql
         *     labels.key = 'foo' and labels.value = 'bar'
         *     ```
         *
         *     If the parameter isn't provided, or if the value is empty, then
         *     all the accounts that the user has permission to see will be
         *     returned. */
        search?: components['parameters']['search'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all plans */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Plans list */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['PlanList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/plans/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** Get a plan by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Plan found */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Plan'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No plan with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/pull_secrets': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Return access token generated from registries in docker format */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Identifier of the resource in the external service that this pull secret relates to */
      requestBody: {
        content: {
          'application/json': components['schemas']['PullSecretRequest'];
        };
      };
      responses: {
        /** @description access token from registries in docker format */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AccessTokenCfg'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Cannot find registry */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/pull_secrets/{externalResourceId}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The external resource id of record */
        externalResourceId: components['parameters']['externalResourceId'];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete a pull secret */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The external resource id of record */
          externalResourceId: components['parameters']['externalResourceId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Pull secret successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to delete pull secret */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No Pull secret with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the pull secret */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/quota_authorizations': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Authorizes a user to consume or release a single quantity of quota */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description User data and intention */
      requestBody: {
        content: {
          'application/json': components['schemas']['QuotaAuthorizationRequest'];
        };
      };
      responses: {
        /** @description The authorization action was successful */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['QuotaAuthorizationResponse'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description AMS subscription exists but is associated with another account */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description The limits for this subscription are exceeded. */
        429: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Other cluster authorization error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/quota_cost': {
    parameters: {
      query?: {
        /** @description Specifies the search criteria. The syntax of this parameter is
         *     similar to the syntax of the _where_ clause of an SQL statement,
         *     using the names of the json attributes / column names of the account.
         *     For example, in order to retrieve all the accounts with a username starting with `my`:
         *
         *     ```sql
         *     username like 'my%'
         *     ```
         *
         *     > **Important Note**:
         *     Account Management Service uses **KSUID** as an **ID** field.
         *     KSUID contains a timestamp component that allows them to be sorted by generation time.
         *     As this field uses an index, please use it to sort by instead of `created_at` field.
         *
         *     The search criteria can also be applied on related resource.
         *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
         *
         *     ```sql
         *     labels.key = 'foo' and labels.value = 'bar'
         *     ```
         *
         *     If the parameter isn't provided, or if the value is empty, then
         *     all the accounts that the user has permission to see will be
         *     returned. */
        search?: components['parameters']['search'];
        /** @description Page number of record list when record list exceeds specified page size */
        page?: components['parameters']['page'];
        /** @description Maximum number of records to return */
        size?: components['parameters']['size'];
        /** @description If true, includes the related resources in the output. Could slow request response time. */
        fetchRelatedResources?: components['parameters']['fetchRelatedResources'];
        /** @description If true, includes the marketplace cloud accounts in the output. Could slow request response time. */
        fetchCloudAccounts?: components['parameters']['fetchCloudAccounts'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a summary of quota cost for the authenticated user */
    get: {
      parameters: {
        query?: {
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description If true, includes the related resources in the output. Could slow request response time. */
          fetchRelatedResources?: components['parameters']['fetchRelatedResources'];
          /** @description If true, includes the marketplace cloud accounts in the output. Could slow request response time. */
          fetchCloudAccounts?: components['parameters']['fetchCloudAccounts'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of QuotaCost objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['QuotaCostList'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred when getting this resource */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/quota_rules': {
    parameters: {
      query?: {
        /** @description Page number of record list when record list exceeds specified page size */
        page?: components['parameters']['page'];
        /** @description Maximum number of records to return */
        size?: components['parameters']['size'];
        /** @description Specifies the search criteria. The syntax of this parameter is
         *     similar to the syntax of the _where_ clause of an SQL statement,
         *     using the names of the json attributes / column names of the account.
         *     For example, in order to retrieve all the accounts with a username starting with `my`:
         *
         *     ```sql
         *     username like 'my%'
         *     ```
         *
         *     > **Important Note**:
         *     Account Management Service uses **KSUID** as an **ID** field.
         *     KSUID contains a timestamp component that allows them to be sorted by generation time.
         *     As this field uses an index, please use it to sort by instead of `created_at` field.
         *
         *     The search criteria can also be applied on related resource.
         *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
         *
         *     ```sql
         *     labels.key = 'foo' and labels.value = 'bar'
         *     ```
         *
         *     If the parameter isn't provided, or if the value is empty, then
         *     all the accounts that the user has permission to see will be
         *     returned. */
        search?: components['parameters']['search'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of UHC product Quota Rules */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of quota rules objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['QuotaRulesList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/quotas': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of quotas */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of quota objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['QuotaList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new quota */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Quota data */
      requestBody: {
        content: {
          'application/json': components['schemas']['Quota'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Quota'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Quota already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating quota */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/quotas/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** Get a quota */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Quota found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Quota'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No quota with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete a quota */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Quota successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No quota with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the quota */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Update a quota */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      /** @description Updated quota data */
      requestBody: {
        content: {
          'application/json': components['schemas']['Quota'];
        };
      };
      responses: {
        /** @description Quota updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Quota'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No quota with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error updating quota */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/accounts_mgmt/v1/regions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of regions to which a user has access */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of Region objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RegionList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred when getting this resource */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/regions/summary': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a summary of clusters by region */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of RegionSummary objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RegionSummaryList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred when getting this resource */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/registries': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of registries */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of registry objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RegistryList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/registries/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** Get an registry by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Registry found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Registry'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No registry with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/registry_credentials': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description List Registry Credentials */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of RegistryCredential objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RegistryCredentialList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Not allowed to list RegistryCredentials */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Request the creation of a registry credential */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Registry credential data */
      requestBody: {
        content: {
          'application/json': components['schemas']['RegistryCredential'];
        };
      };
      responses: {
        /** @description Registry credential created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RegistryCredential'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Not allowed to create RegistryCredentials */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description A RegistryCredential with this type already exists for this user */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unable to create Registry Credential */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/registry_credentials/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** Get a registry credentials by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Registry credential found */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RegistryCredential'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No registry credential with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete a registry credential by id */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Registry credential successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No registry credential with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the registry credential */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Update a registry credential */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      /** @description Updated registry credential data */
      requestBody: {
        content: {
          'application/json': components['schemas']['RegistryCredentialPatchRequest'];
        };
      };
      responses: {
        /** @description Registry credential updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RegistryCredential'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Not allowed to update registry credential or the specified field(s) */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No registry credential with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error updating registry credential */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/accounts_mgmt/v1/reserved_resources': {
    parameters: {
      query?: {
        /** @description Page number of record list when record list exceeds specified page size */
        page?: components['parameters']['page'];
        /** @description Maximum number of records to return */
        size?: components['parameters']['size'];
        /** @description Specifies the search criteria. The syntax of this parameter is
         *     similar to the syntax of the _where_ clause of an SQL statement,
         *     using the names of the json attributes / column names of the account.
         *     For example, in order to retrieve all the accounts with a username starting with `my`:
         *
         *     ```sql
         *     username like 'my%'
         *     ```
         *
         *     > **Important Note**:
         *     Account Management Service uses **KSUID** as an **ID** field.
         *     KSUID contains a timestamp component that allows them to be sorted by generation time.
         *     As this field uses an index, please use it to sort by instead of `created_at` field.
         *
         *     The search criteria can also be applied on related resource.
         *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
         *
         *     ```sql
         *     labels.key = 'foo' and labels.value = 'bar'
         *     ```
         *
         *     If the parameter isn't provided, or if the value is empty, then
         *     all the accounts that the user has permission to see will be
         *     returned. */
        search?: components['parameters']['search'];
        /** @description Specifies the order by criteria. The syntax of this parameter is
         *     similar to the syntax of the _order by_ clause of an SQL statement,
         *     but using the names of the json attributes / column of the account.
         *     For example, in order to retrieve all accounts ordered by username:
         *
         *     ```sql
         *     username asc
         *     ```
         *
         *     Or in order to retrieve all accounts ordered by username _and_ first name:
         *
         *     ```sql
         *     username asc, firstName asc
         *     ```
         *
         *     If the parameter isn't provided, or if the value is empty, then
         *     no explicit ordering will be applied. */
        orderBy?: components['parameters']['orderBy'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of reserved resources */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of reserved resource objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ReservedResourceList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/resource_quota': {
    parameters: {
      query?: {
        /** @description Page number of record list when record list exceeds specified page size */
        page?: components['parameters']['page'];
        /** @description Maximum number of records to return */
        size?: components['parameters']['size'];
        /** @description Specifies the search criteria. The syntax of this parameter is
         *     similar to the syntax of the _where_ clause of an SQL statement,
         *     using the names of the json attributes / column names of the account.
         *     For example, in order to retrieve all the accounts with a username starting with `my`:
         *
         *     ```sql
         *     username like 'my%'
         *     ```
         *
         *     > **Important Note**:
         *     Account Management Service uses **KSUID** as an **ID** field.
         *     KSUID contains a timestamp component that allows them to be sorted by generation time.
         *     As this field uses an index, please use it to sort by instead of `created_at` field.
         *
         *     The search criteria can also be applied on related resource.
         *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
         *
         *     ```sql
         *     labels.key = 'foo' and labels.value = 'bar'
         *     ```
         *
         *     If the parameter isn't provided, or if the value is empty, then
         *     all the accounts that the user has permission to see will be
         *     returned. */
        search?: components['parameters']['search'];
        /** @description Specifies the order by criteria. The syntax of this parameter is
         *     similar to the syntax of the _order by_ clause of an SQL statement,
         *     but using the names of the json attributes / column of the account.
         *     For example, in order to retrieve all accounts ordered by username:
         *
         *     ```sql
         *     username asc
         *     ```
         *
         *     Or in order to retrieve all accounts ordered by username _and_ first name:
         *
         *     ```sql
         *     username asc, firstName asc
         *     ```
         *
         *     If the parameter isn't provided, or if the value is empty, then
         *     no explicit ordering will be applied. */
        orderBy?: components['parameters']['orderBy'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of resource quota objects */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of ResourceQuota objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ResourceQuotaList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred when getting this resource */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/role_bindings': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of role bindings */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of role binding objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RoleBindingList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new role binding */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Role binding data */
      requestBody: {
        content: {
          'application/json': components['schemas']['RoleBindingCreateRequest'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RoleBinding'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Role binding already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating role binding */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/role_bindings/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** Get a role binding */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Role binding found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RoleBinding'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No role binding with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete a role binding */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Role binding successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No role binding with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the role binding */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Update a role binding */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      /** @description Updated role binding data */
      requestBody: {
        content: {
          'application/json': components['schemas']['RoleBindingRequest'];
        };
      };
      responses: {
        /** @description Role Binding updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RoleBinding'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No role binding with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error updating role binding */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/accounts_mgmt/v1/roles': {
    parameters: {
      query?: {
        /** @description Page number of record list when record list exceeds specified page size */
        page?: components['parameters']['page'];
        /** @description Maximum number of records to return */
        size?: components['parameters']['size'];
        /** @description Specifies the search criteria. The syntax of this parameter is
         *     similar to the syntax of the _where_ clause of an SQL statement,
         *     using the names of the json attributes / column names of the account.
         *     For example, in order to retrieve all the accounts with a username starting with `my`:
         *
         *     ```sql
         *     username like 'my%'
         *     ```
         *
         *     > **Important Note**:
         *     Account Management Service uses **KSUID** as an **ID** field.
         *     KSUID contains a timestamp component that allows them to be sorted by generation time.
         *     As this field uses an index, please use it to sort by instead of `created_at` field.
         *
         *     The search criteria can also be applied on related resource.
         *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
         *
         *     ```sql
         *     labels.key = 'foo' and labels.value = 'bar'
         *     ```
         *
         *     If the parameter isn't provided, or if the value is empty, then
         *     all the accounts that the user has permission to see will be
         *     returned. */
        search?: components['parameters']['search'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of roles */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of role objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['RoleList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/roles/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** Get a role by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Role found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Role'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No role with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/self_entitlement/{product}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The product for self_entitlement. The supported products are [rosa]. */
        product: components['parameters']['product'];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Create or renew the entitlement to support a product for the user's organization. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The product for self_entitlement. The supported products are [rosa]. */
          product: components['parameters']['product'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description the requested entitlement already exists */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SelfEntitlementStatus'];
          };
        };
        /** @description the requested entitlement has been created or renewed */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SelfEntitlementStatus'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Cannot find account or organization */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/sku_rules': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of UHC product SKU Rules */
    get: {
      parameters: {
        query?: {
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of sku rules objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SkuRulesList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new sku rule */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Sku rule data */
      requestBody: {
        content: {
          'application/json': components['schemas']['SkuRules'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SkuRules'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Sku rule already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating sku rule */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/sku_rules/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** Get a sku rules by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description sku rules found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SkuRules'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No sku rules with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete a sku rule */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Sku rule successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No sku rule with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the sku rule */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Update a sku rule */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      /** @description Updated sku rule data */
      requestBody: {
        content: {
          'application/json': components['schemas']['SkuRules'];
        };
      };
      responses: {
        /** @description Sku rule updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SkuRules'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No sku rule with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error updating sku rule */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/accounts_mgmt/v1/skus': {
    parameters: {
      query?: {
        /** @description Specifies the search criteria. The syntax of this parameter is
         *     similar to the syntax of the _where_ clause of an SQL statement,
         *     using the names of the json attributes / column names of the account.
         *     For example, in order to retrieve all the accounts with a username starting with `my`:
         *
         *     ```sql
         *     username like 'my%'
         *     ```
         *
         *     > **Important Note**:
         *     Account Management Service uses **KSUID** as an **ID** field.
         *     KSUID contains a timestamp component that allows them to be sorted by generation time.
         *     As this field uses an index, please use it to sort by instead of `created_at` field.
         *
         *     The search criteria can also be applied on related resource.
         *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
         *
         *     ```sql
         *     labels.key = 'foo' and labels.value = 'bar'
         *     ```
         *
         *     If the parameter isn't provided, or if the value is empty, then
         *     all the accounts that the user has permission to see will be
         *     returned. */
        search?: components['parameters']['search'];
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Returns a list of UHC product SKUs
     * @deprecated
     */
    get: {
      parameters: {
        query?: {
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of sku objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SkuList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/skus/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /**
     * Get a sku by id
     * @deprecated
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description sku found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SKU'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No sku with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/subscriptions': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of subscriptions */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description If true, includes the account reference information in the output. Could slow request response time. */
          fetchAccounts?: components['parameters']['fetchAccounts'];
          /** @description If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. */
          fetchLabels?: components['parameters']['fetchLabels'];
          /** @description If true, includes the capabilities on a subscription in the output. Could slow request response time. */
          fetchCapabilities?: components['parameters']['fetchCapabilities'];
          /** @description If true, includes the organization object on a subscription in the output. Could slow request response time. */
          fetchOrganization?: components['parameters']['fetchOrganization'];
          /** @description Supplies a comma-separated list of fields to be returned.
           *     Fields of sub-structures and of arrays use <structure>.<field> notation.
           *     <stucture>.* means all field of a structure
           *     Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)
           *
           *     ```
           *     ocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true
           *     ``` */
          fields?: components['parameters']['fields'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
          /** @description Specifies the criteria to filter the subscription resource based on their labels.
           *     A label is represented as a `key=value` pair,
           *
           *     ```
           *     labels = "foo=bar"
           *     ```
           *
           *     and multiple labels are separated by comma,
           *
           *     ```
           *     labels = "foo=bar,fooz=barz"
           *     ``` */
          labels?: components['parameters']['labels'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of subscription objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SubscriptionList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new subscription */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Subscription Creation data */
      requestBody: {
        content: {
          'application/json': components['schemas']['SubscriptionCreateRequest'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Subscription'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Subscription already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating subscription */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/subscriptions/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** Get a subscription by id */
    get: {
      parameters: {
        query?: {
          /** @description If true, includes the account reference information in the output. Could slow request response time. */
          fetchAccounts?: components['parameters']['fetchAccounts'];
          /** @description If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. */
          fetchLabels?: components['parameters']['fetchLabels'];
          /** @description If true, includes the capabilities on a subscription in the output. Could slow request response time. */
          fetchCapabilities?: components['parameters']['fetchCapabilities'];
          /** @description If true, returns either an empty result set or a valid ClusterTransfer list on a subscription in the output. Could slow request response time. */
          fetchClusterTransfers?: components['parameters']['fetchClusterTransfers'];
          /** @description If true, fetches, from the clusters service, the total numbers of CPU's and sockets under an obligation, and includes in the output. Could slow request response time. */
          fetchCpuAndSocket?: components['parameters']['fetchCpuAndSocket'];
        };
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Subscription found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Subscription'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No subscription with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Deletes a subscription by id */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Subscription deprovisioned by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No subscription with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Update a subscription */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      /** @description Updated subscription data */
      requestBody: {
        content: {
          'application/json': components['schemas']['SubscriptionPatchRequest'];
        };
      };
      responses: {
        /** @description Subscription updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Subscription'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Not allowed to update subscriptions or the specified field(s) */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No subscription with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error updating subscription */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/accounts_mgmt/v1/subscriptions/{id}/labels': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of labels */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
        };
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of label */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['LabelList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new label or update an existing label */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      /** @description Label data */
      requestBody: {
        content: {
          'application/json': components['schemas']['Label'];
        };
      };
      responses: {
        /** @description Created or updated label successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Label'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating the label */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
        /** @description The key of the label */
        key: components['parameters']['key'];
      };
      cookie?: never;
    };
    /** Get subscription labels by label key */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
          /** @description The key of the label */
          key: components['parameters']['key'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Labels found by key */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Label'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No label with specified key on specified subscription id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete a label */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
          /** @description The key of the label */
          key: components['parameters']['key'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Label successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No label with specified key on specified subscription id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the label */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Create a new label or update an existing label */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
          /** @description The key of the label */
          key: components['parameters']['key'];
        };
        cookie?: never;
      };
      /** @description Label data */
      requestBody: {
        content: {
          'application/json': components['schemas']['Label'];
        };
      };
      responses: {
        /** @description Created or updated label successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Label'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Label already exists and cannot be updated */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error updating subscription label */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/accounts_mgmt/v1/subscriptions/{id}/metrics/{metric_name}': {
    parameters: {
      query?: {
        /** @description The `search` paramter specifies the PromQL selector. The syntax is defined by Prometheus at
         *     https://prometheus.io/docs/prometheus/latest/querying/basics/#time-series-selectors.
         *     It only supports simple selections as shown in https://prometheus.io/docs/prometheus/latest/querying/examples/#simple-time-series-selection.
         *     For example, in order to retrieve subscription_sync_total with names starting with `managed` and with a channel = `production`:
         *
         *     ```
         *     name=~'managed.*',channel='production'
         *     ```
         *
         *     If the parameter isn't provided, or if the value is empty, then all the records will be returned. */
        search?: components['parameters']['metricSearch'];
        /** @description Supplies a comma-separated list of fields to be returned.
         *     Fields of sub-structures and of arrays use <structure>.<field> notation.
         *     <stucture>.* means all field of a structure
         *     Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)
         *
         *     ```
         *     ocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true
         *     ``` */
        fields?: components['parameters']['fields'];
      };
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
        /** @description The name of the metric */
        metric_name: components['parameters']['metricName'];
      };
      cookie?: never;
    };
    /** Get subscription's metrics by metric name */
    get: {
      parameters: {
        query?: {
          /** @description The `search` paramter specifies the PromQL selector. The syntax is defined by Prometheus at
           *     https://prometheus.io/docs/prometheus/latest/querying/basics/#time-series-selectors.
           *     It only supports simple selections as shown in https://prometheus.io/docs/prometheus/latest/querying/examples/#simple-time-series-selection.
           *     For example, in order to retrieve subscription_sync_total with names starting with `managed` and with a channel = `production`:
           *
           *     ```
           *     name=~'managed.*',channel='production'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then all the records will be returned. */
          search?: components['parameters']['metricSearch'];
          /** @description Supplies a comma-separated list of fields to be returned.
           *     Fields of sub-structures and of arrays use <structure>.<field> notation.
           *     <stucture>.* means all field of a structure
           *     Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)
           *
           *     ```
           *     ocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true
           *     ``` */
          fields?: components['parameters']['fields'];
        };
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
          /** @description The name of the metric */
          metric_name: components['parameters']['metricName'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Metrics' data */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SubscriptionMetricList'];
          };
        };
        /** @description Metric name is invalid */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/subscriptions/{id}/ondemand_metrics': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get an ondemand metrics of a subscription by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Metrics found */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['OndemandMetrics'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No subscription with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/subscriptions/{id}/reserved_resources': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of reserved resources */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
        };
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of reserved resource objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ReservedResourceList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/subscriptions/{id}/support_cases': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
      };
      cookie?: never;
    };
    /** Returns a list of open support creates opened against the external cluster id of this subscrption */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
        };
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of support cases objects */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Returns a list of notification contacts for the given subscription */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Supplies a comma-separated list of fields to be returned.
           *     Fields of sub-structures and of arrays use <structure>.<field> notation.
           *     <stucture>.* means all field of a structure
           *     Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)
           *
           *     ```
           *     ocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true
           *     ``` */
          fields?: components['parameters']['fields'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
        };
        header?: never;
        path: {
          /** @description The id of subscription */
          subId: components['parameters']['subId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description A JSON array of account objects that are notification contacts for this subscription */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AccountList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Add an account as a notification contact to this subscription */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of subscription */
          subId: components['parameters']['subId'];
        };
        cookie?: never;
      };
      /** @description Add a notification contact by an account's username */
      requestBody: {
        content: {
          'application/json': components['schemas']['NotificationContactCreateRequest'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Account'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Notification contact already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating notification contact */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts/{accountId}': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Deletes a notification contact by subscription and account id */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of subscription */
          subId: components['parameters']['subId'];
          /** @description The id of account */
          accountId: components['parameters']['accountId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Notification contact deleted by subscription and account id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No notification contact with specified subscription and account id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/subscriptions/{subId}/reserved_resources/{reservedResourceId}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of subscription */
        subId: components['parameters']['subId'];
        /** @description The id of reserved resource */
        reservedResourceId: components['parameters']['reservedResourceId'];
      };
      cookie?: never;
    };
    /** Get reserved resources by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of subscription */
          subId: components['parameters']['subId'];
          /** @description The id of reserved resource */
          reservedResourceId: components['parameters']['reservedResourceId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Reserved resources found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ReservedResource'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No reserved resources with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete reserved resources by id */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of subscription */
          subId: components['parameters']['subId'];
          /** @description The id of reserved resource */
          reservedResourceId: components['parameters']['reservedResourceId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Reserved resources deleted by id */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No reserved resources with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    /** Update a reserved resource */
    patch: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of subscription */
          subId: components['parameters']['subId'];
          /** @description The id of reserved resource */
          reservedResourceId: components['parameters']['reservedResourceId'];
        };
        cookie?: never;
      };
      /** @description Updated reserved resource data */
      requestBody: {
        content: {
          'application/json': components['schemas']['ReservedResourcePatchRequest'];
        };
      };
      responses: {
        /** @description Reserved resources updated successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ReservedResource'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No reserved resources with specified id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    trace?: never;
  };
  '/api/accounts_mgmt/v1/subscriptions/{subId}/role_bindings': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of subscription */
        subId: components['parameters']['subId'];
      };
      cookie?: never;
    };
    /** Get subscription role bindings */
    get: {
      parameters: {
        query?: {
          /** @description Page number of record list when record list exceeds specified page size */
          page?: components['parameters']['page'];
          /** @description Maximum number of records to return */
          size?: components['parameters']['size'];
          /** @description Specifies the search criteria. The syntax of this parameter is
           *     similar to the syntax of the _where_ clause of an SQL statement,
           *     using the names of the json attributes / column names of the account.
           *     For example, in order to retrieve all the accounts with a username starting with `my`:
           *
           *     ```sql
           *     username like 'my%'
           *     ```
           *
           *     > **Important Note**:
           *     Account Management Service uses **KSUID** as an **ID** field.
           *     KSUID contains a timestamp component that allows them to be sorted by generation time.
           *     As this field uses an index, please use it to sort by instead of `created_at` field.
           *
           *     The search criteria can also be applied on related resource.
           *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
           *
           *     ```sql
           *     labels.key = 'foo' and labels.value = 'bar'
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     all the accounts that the user has permission to see will be
           *     returned. */
          search?: components['parameters']['search'];
          /** @description Specifies the order by criteria. The syntax of this parameter is
           *     similar to the syntax of the _order by_ clause of an SQL statement,
           *     but using the names of the json attributes / column of the account.
           *     For example, in order to retrieve all accounts ordered by username:
           *
           *     ```sql
           *     username asc
           *     ```
           *
           *     Or in order to retrieve all accounts ordered by username _and_ first name:
           *
           *     ```sql
           *     username asc, firstName asc
           *     ```
           *
           *     If the parameter isn't provided, or if the value is empty, then
           *     no explicit ordering will be applied. */
          orderBy?: components['parameters']['orderBy'];
          /** @description If true, includes the account reference information in the output. Could slow request response time. */
          fetchAccounts?: components['parameters']['fetchAccounts'];
        };
        header?: never;
        path: {
          /** @description The id of subscription */
          subId: components['parameters']['subId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Subscription role bindings found, or none exist */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SubscriptionRoleBindingList'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    /** Create a new subscription role binding */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of subscription */
          subId: components['parameters']['subId'];
        };
        cookie?: never;
      };
      /** @description Subscription role binding data */
      requestBody: {
        content: {
          'application/json': components['schemas']['SubscriptionRoleBindingCreateRequest'];
        };
      };
      responses: {
        /** @description Created */
        201: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SubscriptionRoleBinding'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Subscription role binding already exists */
        409: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred creating the subscription role binding */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/subscriptions/{subId}/role_bindings/{id}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of record */
        id: components['parameters']['id'];
        /** @description The id of subscription */
        subId: components['parameters']['subId'];
      };
      cookie?: never;
    };
    /** Get a Subscription Role Binding by id */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
          /** @description The id of subscription */
          subId: components['parameters']['subId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Subscription Role Binding found by id */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SubscriptionRoleBinding'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No Subscription Role Binding with the specified id is accessible */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /** Delete a subscription role binding */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of record */
          id: components['parameters']['id'];
          /** @description The id of subscription */
          subId: components['parameters']['subId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Subscription role binding successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No Subscription Role Binding with specified Id is accessible */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the Subscription Role Binding */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/support_cases': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** create a support case for the subscription */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description The contents of the support case to be created */
      requestBody: {
        content: {
          'application/json': components['schemas']['SupportCasesRequest'];
        };
      };
      responses: {
        /** @description Support case created */
        202: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SupportCasesCreatedResponse'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/support_cases/{caseId}': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description The id of a support case */
        caseId: components['parameters']['caseId'];
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /** Delete a support case */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description The id of a support case */
          caseId: components['parameters']['caseId'];
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Support case successfully deleted */
        204: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description No support case with specified case id on specified subscription id exists */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Not allowed to close a case that is already closed */
        405: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description An unexpected error occurred deleting the support case */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/accounts_mgmt/v1/token_authorization': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Finds the account owner of the provided token */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Token authorization data */
      requestBody: {
        content: {
          'application/json': components['schemas']['TokenAuthorizationRequest'];
        };
      };
      responses: {
        /** @description The account belongs to the user with the specified registry credential token */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['TokenAuthorizationResponse'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Registry credential token is invalid */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Registry credential token is not found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Other token authorization error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/authorizations/v1/access_review': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Review an account's access to perform an action on a particular resource or resource type */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Access review data */
      requestBody: {
        content: {
          'application/json': components['schemas']['AccessReview'];
        };
      };
      responses: {
        /** @description Review successfully generated */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AccessReviewResponse'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unsupported action, non-existent resource type, or non-existent account */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred while generating access review */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/authorizations/v1/capability_review': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Review an account's capabilities */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Capability review data */
      requestBody: {
        content: {
          'application/json': components['schemas']['CapabilityReviewRequest'];
        };
      };
      responses: {
        /** @description Successful review */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['CapabilityReview'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform capability reviews */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred while generating capability review */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/authorizations/v1/export_control_review': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Determine whether a user is restricted from downloading Red Hat software based on export control compliance.
     *      */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Export control review data */
      requestBody: {
        content: {
          'application/json': components['schemas']['ExportControlReviewRequest'];
        };
      };
      responses: {
        /** @description Successful review */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ExportControlReview'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred while generating access review */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/authorizations/v1/feature_review': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Review feature to perform an action on it such as toggle a feature on/off */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Feature review data */
      requestBody: {
        content: {
          'application/json': components['schemas']['FeatureReview'];
        };
      };
      responses: {
        /** @description Review successfully generated */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['FeatureReviewResponse'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred while generating feature review */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/authorizations/v1/resource_review': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as ["*"] is shorthand for all ids.
     * @deprecated
     */
    post: {
      parameters: {
        query?: {
          /** @description If true, When returning a list of cluster_ids/cluster_uuids/subscription_ids, if those are already included in one of the organizations provided in organization_ids, do not include it in the list. */
          reduceClusterList?: components['parameters']['reduceClusterList'];
          /** @description A comma-separated list of subscription statuses. Subscriptions with these statuses will be excluded from results. This options is mutually exclusive with includeSubscriptionStatuses. */
          excludeSubscriptionStatuses?: components['parameters']['excludeSubscriptionStatuses'];
          /** @description A comma-separated list of subscription statuses. Only subscriptions with these statuses will be included into results. This options is mutually exclusive with excludeSubscriptionStatuses. */
          includeSubscriptionStatuses?: components['parameters']['includeSubscriptionStatuses'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Resource review data */
      requestBody: {
        content: {
          'application/json': components['schemas']['ResourceReviewRequest'];
        };
      };
      responses: {
        /** @description Successful review */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ResourceReview'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform resource reviews */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unsupported action or non-existent resource type */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred while generating access review */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/authorizations/v1/self_access_review': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Review your ability to perform an action on a particular resource or resource type */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Self access review data */
      requestBody: {
        content: {
          'application/json': components['schemas']['SelfAccessReview'];
        };
      };
      responses: {
        /** @description Review successfully generated */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['AccessReviewResponse'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unsupported action or non-existent resource type */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred while generating access review */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/authorizations/v1/self_feature_review': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Review your ability to toggle a feature */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Self feature review data */
      requestBody: {
        content: {
          'application/json': components['schemas']['SelfFeatureReview'];
        };
      };
      responses: {
        /** @description Review successfully generated */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['FeatureReviewResponse'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred while generating feature review */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/authorizations/v1/self_resource_review': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as ["*"] is shorthand for all ids. */
    post: {
      parameters: {
        query?: {
          /** @description If true, When returning a list of cluster_ids/cluster_uuids/subscription_ids, if those are already included in one of the organizations provided in organization_ids, do not include it in the list. */
          reduceClusterList?: components['parameters']['reduceClusterList'];
          /** @description A comma-separated list of subscription statuses. Subscriptions with these statuses will be excluded from results. This options is mutually exclusive with includeSubscriptionStatuses. */
          excludeSubscriptionStatuses?: components['parameters']['excludeSubscriptionStatuses'];
          /** @description A comma-separated list of subscription statuses. Only subscriptions with these statuses will be included into results. This options is mutually exclusive with excludeSubscriptionStatuses. */
          includeSubscriptionStatuses?: components['parameters']['includeSubscriptionStatuses'];
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Self resource review data */
      requestBody: {
        content: {
          'application/json': components['schemas']['SelfResourceReviewRequest'];
        };
      };
      responses: {
        /** @description Successful review */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['SelfResourceReview'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform self resource reviews */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unsupported action or non-existent resource type */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred while generating access review */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/authorizations/v1/self_terms_review': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Review your status of Terms */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Data to check self terms for */
      requestBody: {
        content: {
          'application/json': components['schemas']['SelfTermsReview'];
        };
      };
      responses: {
        /** @description Review successfully generated */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['TermsReviewResponse'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unsupported action or non-existent resource type */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred while generating terms review */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/authorizations/v1/terms_review': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Review an account's status of Terms */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Data to check terms for */
      requestBody: {
        content: {
          'application/json': components['schemas']['TermsReview'];
        };
      };
      responses: {
        /** @description Review successfully generated */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['TermsReviewResponse'];
          };
        };
        /** @description Validation errors occurred */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Auth token is invalid */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unauthorized to perform operation */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unsupported action, non-existent resource type, or non-existent account */
        422: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
        /** @description Unexpected error occurred while generating terms review */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['Error'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    AccessReview: {
      account_username: string;
      /** @enum {string} */
      action: AccessReviewAction;
      cluster_id?: string;
      cluster_uuid?: string;
      organization_id?: string;
      /** @enum {string} */
      resource_type: AccessReviewResource_type;
      subscription_id?: string;
    };
    AccessReviewResponse: {
      account_id?: string;
      /** @enum {string} */
      action?: AccessReviewResponseAction;
      allowed: boolean;
      cluster_id?: string;
      cluster_uuid?: string;
      is_ocm_internal?: boolean;
      organization_id?: string;
      reason?: string;
      /** @enum {string} */
      resource_type?: AccessReviewResponseResource_type;
      subscription_id?: string;
    };
    AccessTokenCfg: {
      auths: {
        [key: string]: unknown;
      };
    };
    Account: components['schemas']['ObjectReference'] & {
      ban_code?: string;
      ban_description?: string;
      /** @default false */
      banned: boolean;
      capabilities?: components['schemas']['Capability'][];
      /** Format: date-time */
      created_at?: string;
      /** Format: email */
      email?: string;
      first_name?: string;
      labels?: components['schemas']['Label'][];
      last_name?: string;
      organization?: components['schemas']['Organization'];
      organization_id?: string;
      rhit_account_id?: string;
      rhit_web_user_id?: string;
      /** @default false */
      service_account: boolean;
      /** Format: date-time */
      updated_at?: string;
      username: string;
    };
    AccountGroup: components['schemas']['ObjectReference'] & {
      /** Format: date-time */
      created_at?: string;
      description: string;
      external_id?: string;
      /** @enum {string} */
      managed_by: AccountGroupManaged_by;
      name: string;
      organization_id: string;
      /** Format: date-time */
      updated_at?: string;
    };
    AccountGroupAssignment: components['schemas']['ObjectReference'] & {
      account_group_id: string;
      account_id: string;
      /** Format: date-time */
      created_at?: string;
      /** @enum {string} */
      managed_by: AccountGroupAssignmentManaged_by;
      /** Format: date-time */
      updated_at?: string;
    };
    AccountGroupAssignmentList: components['schemas']['List'] & {
      items?: components['schemas']['AccountGroupAssignment'][];
    };
    AccountGroupList: components['schemas']['List'] & {
      items?: components['schemas']['AccountGroup'][];
    };
    AccountGroupRequest: components['schemas']['ObjectReference'] & {
      description: string;
      name: string;
    };
    AccountList: components['schemas']['List'] & {
      items?: components['schemas']['Account'][];
    };
    AccountPatchRequest: {
      ban_code?: string;
      ban_description?: string;
      banned?: boolean;
      /** Format: email */
      email?: string;
      first_name?: string;
      last_name?: string;
      organization_id?: string;
      service_account?: boolean;
    };
    AccountReference: components['schemas']['ObjectReference'] & {
      email?: string;
      first_name?: string;
      last_name?: string;
      name?: string;
      username?: string;
    };
    BillingModel: components['schemas']['ObjectReference'] & {
      /** @enum {string} */
      billing_model_type: BillingModelBilling_model_type;
      description: string;
      display_name: string;
      id: string;
      marketplace?: string;
    };
    BillingModelList: components['schemas']['List'] & {
      items?: components['schemas']['BillingModel'][];
    };
    Capability: components['schemas']['ObjectReference'] & {
      inherited: boolean;
      name: string;
      value: string;
    };
    CapabilityList: components['schemas']['List'] & {
      items?: components['schemas']['Capability'][];
    };
    CapabilityReview: {
      result: string;
    };
    CapabilityReviewRequest: {
      account_username: string;
      /** @enum {string} */
      capability: CapabilityReviewRequestCapability;
      cluster_id?: string;
      organization_id?: string;
      subscription_id?: string;
      /** @enum {string} */
      type: CapabilityReviewRequestType;
    };
    Certificate: {
      cert: string;
      id: string;
      key: string;
      metadata: {
        [key: string]: string;
      };
      organization_id: string;
      serial: components['schemas']['CertificateSerial'];
    };
    CertificateSerial: {
      /** Format: date-time */
      created: string;
      /** Format: date-time */
      expiration: string;
      /** Format: int64 */
      id: number;
      /** Format: int64 */
      serial: number;
      /** Format: date-time */
      updated: string;
    };
    CertificatesRequest: {
      /** @enum {string} */
      arch: CertificatesRequestArch;
      /**
       * @deprecated
       * @enum {string}
       */
      type?: CertificatesRequestType;
    };
    CloudAccount: {
      cloud_account_id?: string;
      cloud_provider_id?: string;
      contracts?: components['schemas']['Contract'][];
    };
    CloudResource: components['schemas']['ObjectReference'] & {
      /** @default true */
      active: boolean;
      category?: string;
      category_pretty?: string;
      ccs_only?: boolean;
      cloud_provider?: string;
      cpu_cores?: number;
      /** Format: date-time */
      created_at?: string;
      generic_name?: string;
      hcp_only?: boolean;
      /** Format: int64 */
      memory?: number;
      memory_pretty?: string;
      name_pretty?: string;
      /** @enum {string} */
      resource_type?: CloudResourceResource_type;
      size_pretty?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    CloudResourceList: components['schemas']['List'] & {
      items?: components['schemas']['CloudResource'][];
    };
    ClusterAuthorizationRequest: {
      account_username: string;
      availability_zone?: string;
      byoc?: boolean;
      cloud_account_id?: string;
      cloud_provider_id?: string;
      cluster_id: string;
      disconnected?: boolean;
      display_name?: string;
      external_cluster_id?: string;
      managed?: boolean;
      /** @enum {string} */
      product_category?: ClusterAuthorizationRequestProduct_category;
      /**
       * @default OSD
       * @enum {string}
       */
      product_id: ClusterAuthorizationRequestProduct_id;
      quota_version?: string;
      reserve?: boolean;
      resources?: components['schemas']['ReservedResource'][];
      rh_region_id?: string;
      scope?: string;
    };
    ClusterAuthorizationResponse: {
      allowed: boolean;
      excess_resources: components['schemas']['ExcessResource'][];
      organization_id?: string;
      subscription?: components['schemas']['ObjectReference'];
    };
    ClusterMetricsNodes: {
      arch?: string;
      /** Format: double */
      compute?: number;
      /** Format: double */
      infra?: number;
      /** Format: double */
      master?: number;
      /** Format: double */
      total?: number;
    };
    ClusterRegistrationRequest: {
      authorization_token?: string;
      cluster_id?: string;
    };
    ClusterRegistrationResponse: {
      account_id?: string;
      authorization_token?: string;
      cluster_id?: string;
      /** @description Cluster Registration expiration in Unix time */
      expires_at?: string;
    };
    ClusterResource: {
      total: {
        unit: string;
        /** Format: double */
        value: number;
      };
      /** Format: date-time */
      updated_timestamp: string;
      used: {
        unit: string;
        /** Format: double */
        value: number;
      };
    };
    ClusterTransfer: components['schemas']['ObjectReference'] & {
      cluster_uuid?: string;
      /** Format: date-time */
      created_at?: string;
      /** Format: date-time */
      expiration_date?: string;
      owner?: string;
      pull_secret_rotation_id?: string;
      recipient?: string;
      recipient_ebs_account_id?: string;
      recipient_external_org_id?: string;
      secret?: string;
      /** @enum {string} */
      status?: ClusterTransferStatus;
      status_description?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    ClusterTransferList: components['schemas']['List'] & {
      items?: components['schemas']['ClusterTransfer'][];
    };
    ClusterTransferPatchRequest: {
      status?: string;
    };
    ClusterTransferRequest: {
      cluster_uuid?: string;
      owner?: string;
      recipient?: string;
      recipient_ebs_account_id?: string;
      recipient_external_org_id?: string;
    };
    ClusterUpgrade: {
      available?: boolean;
      state?: string;
      /** Format: date-time */
      updated_timestamp?: string;
      version?: string;
    };
    ConsumedQuota: components['schemas']['ObjectReference'] & {
      availability_zone_type?: string;
      /** @enum {string} */
      billing_model?: ConsumedQuotaBilling_model;
      byoc: boolean;
      cloud_provider_id?: string;
      count: number;
      organization_id?: string;
      plan_id?: string;
      resource_name?: string;
      resource_type?: string;
      version?: string;
    };
    ConsumedQuotaList: components['schemas']['List'] & {
      items?: components['schemas']['ConsumedQuota'][];
    };
    Contract: {
      dimensions?: components['schemas']['ContractDimension'][];
      /** Format: date-time */
      end_date?: string;
      /** Format: date-time */
      start_date?: string;
    };
    ContractDimension: {
      name?: string;
      value?: string;
    };
    DefaultCapability: components['schemas']['ObjectReference'] & {
      name: string;
      value: string;
    };
    DefaultCapabilityList: components['schemas']['List'] & {
      items?: components['schemas']['DefaultCapability'][];
    };
    DeletedSubscription: components['schemas']['SubscriptionCommonFields'] & {
      /** Format: date-time */
      created_at?: string;
      id?: string;
      metrics?: string;
      original_id?: string;
      /** Format: date-time */
      query_timestamp?: string;
    };
    DeletedSubscriptionList: components['schemas']['List'] & {
      items?: components['schemas']['DeletedSubscription'][];
    };
    EntitlementCertificatesList: {
      items: components['schemas']['Certificate'][];
      /** @example EntitlementCertificatesList */
      kind: string;
      total: number;
    };
    EntitlementCertificatesRequest: {
      /** @example [
       *       "x86",
       *       "x86_64",
       *       "ppc"
       *     ] */
      arch: EntitlementCertificatesRequestArch[];
      /**
       * @deprecated
       * @enum {string}
       */
      type?: EntitlementCertificatesRequestType;
    };
    EphemeralResourceQuota: {
      availability_zone_type?: string;
      byoc?: boolean;
      resource_name?: string;
      resource_type?: string;
      sku?: string;
      sku_count?: number;
    };
    Error: components['schemas']['ObjectReference'] & {
      code?: string;
      operation_id?: string;
      reason?: string;
    };
    ErrorList: components['schemas']['List'] & {
      items?: components['schemas']['Error'][];
    };
    ExcessResource: components['schemas']['ObjectReference'] & {
      availability_zone_type?: string;
      /** @enum {string} */
      billing_model?: ExcessResourceBilling_model;
      byoc: boolean;
      count?: number;
      resource_name?: string;
      resource_type?: string;
    };
    ExportControlReview: {
      restricted: boolean;
    };
    ExportControlReviewRequest: {
      account_username: string;
      ignore_cache?: boolean;
    };
    FeatureReview: {
      account_username?: string;
      cluster_id?: string;
      feature: string;
      organization_id?: string;
    };
    FeatureReviewResponse: {
      /** @default false */
      enabled: boolean;
      feature_id: string;
    };
    FeatureToggle: components['schemas']['ObjectReference'] & {
      /** @default false */
      enabled: boolean;
    };
    FeatureToggleQueryRequest: {
      organization_id: string;
    };
    Label: components['schemas']['ObjectReference'] & {
      account_id?: string;
      /** Format: date-time */
      created_at?: string;
      internal: boolean;
      key: string;
      /** @enum {string} */
      managed_by?: LabelManaged_by;
      organization_id?: string;
      subscription_id?: string;
      type?: string;
      /** Format: date-time */
      updated_at?: string;
      value: string;
    };
    LabelList: components['schemas']['List'] & {
      items?: components['schemas']['Label'][];
    };
    LandingPageCTLItem: {
      shape?: {
        description?: string;
        link?: components['schemas']['LandingPageLinkShape'];
        title?: string;
      };
    };
    LandingPageEstateItem: {
      /** Format: int64 */
      count?: number;
      id?: string;
      shape?: components['schemas']['LandingPageLinkShape'];
    };
    LandingPageLinkShape: {
      href?: string;
      title?: string;
    };
    List: {
      kind: string;
      page: number;
      size: number;
      total: number;
    };
    Metric: components['schemas']['ObjectReference'] & {
      external_id?: string;
      health_state?: string;
      id?: string;
      metrics?: string;
      /** Format: date-time */
      query_timestamp?: string;
    };
    MetricsList: components['schemas']['List'] & {
      items?: components['schemas']['Metric'][];
    };
    NotificationContactCreateRequest: {
      account_identifier?: string;
    };
    NotifyDetailsRequest: {
      bcc_address?: string;
      cluster_id?: string;
      cluster_uuid?: string;
      include_red_hat_associates?: boolean;
      /** @description The `internal_only` parameter is used for validation. Specifically to check if there is a discrepancy between the email address and the log type. */
      internal_only?: boolean;
      /**
       * @description The type of log for which the returned contacts will be used to send a notification. When informed it might influence the returned contacts.
       * @enum {string}
       */
      log_type?: NotifyDetailsRequestLog_type;
      org_id?: string;
      subject?: string;
      subscription_id?: string;
    };
    NotifyDetailsResponse: components['schemas']['ObjectReference'] & {
      key: string;
      value: string;
    };
    NotifyDetailsResponseList: {
      associates?: string[];
      items?: components['schemas']['NotifyDetailsResponse'][];
      recipients?: string[];
    };
    ObjectReference: {
      href?: string;
      id?: string;
      kind?: string;
    };
    OndemandMetrics: {
      alerts?: components['schemas']['OndemandMetricsAlerts'][];
      cluster_operators?: components['schemas']['OndemandMetricsClusterOperators'][];
      nodes?: components['schemas']['OndemandMetricsAlerts'][];
    };
    OndemandMetricsAlerts: {
      name?: string;
      severity?: string;
    };
    OndemandMetricsClusterOperators: {
      condition?: string;
      name?: string;
      reason?: string;
      time?: string;
      version?: string;
    };
    OndemandMetricsNodes: {
      hostname?: string;
      internal_ip?: string;
      time?: string;
      up?: string;
    };
    OneMetric: {
      arch?: string;
      channel_info?: string;
      cloud_provider: string;
      cluster_type: string;
      compute_nodes_cpu: components['schemas']['ClusterResource'];
      compute_nodes_memory: components['schemas']['ClusterResource'];
      compute_nodes_sockets: components['schemas']['ClusterResource'];
      console_url: string;
      cpu: components['schemas']['ClusterResource'];
      /** Format: double */
      critical_alerts_firing: number;
      /** @enum {string} */
      health_state?: OneMetricHealth_state;
      memory: components['schemas']['ClusterResource'];
      nodes: components['schemas']['ClusterMetricsNodes'];
      nodes_arch?: components['schemas']['ClusterMetricsNodes'][];
      /** Format: double */
      non_virt_nodes: number;
      openshift_version: string;
      operating_system: string;
      /** Format: double */
      operators_condition_failing: number;
      /** Format: date-time */
      query_timestamp?: string;
      region: string;
      sockets: components['schemas']['ClusterResource'];
      state: string;
      state_description: string;
      storage: components['schemas']['ClusterResource'];
      /** Format: double */
      subscription_cpu_total: number;
      /** Format: double */
      subscription_obligation_exists: number;
      /** Format: double */
      subscription_socket_total: number;
      upgrade: components['schemas']['ClusterUpgrade'];
    };
    Organization: components['schemas']['ObjectReference'] & {
      capabilities?: components['schemas']['Capability'][];
      /** Format: date-time */
      created_at?: string;
      ebs_account_id?: string;
      external_id?: string;
      labels?: components['schemas']['Label'][];
      name?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    OrganizationList: components['schemas']['List'] & {
      items?: components['schemas']['Organization'][];
    };
    OrganizationPatchRequest: {
      ebs_account_id?: string;
      external_id?: string;
      name?: string;
    };
    Permission: {
      /** @enum {string} */
      action?: PermissionAction;
      resource?: string;
    };
    PermissionList: components['schemas']['List'] & {
      items?: components['schemas']['Permission'][];
    };
    Plan: components['schemas']['ObjectReference'] & {
      category?: string;
      name?: string;
      type?: string;
    };
    PlanList: components['schemas']['List'] & {
      items?: components['schemas']['Plan'][];
    };
    PullSecretRequest: {
      external_resource_id: string;
    };
    PullSecretRotation: components['schemas']['ObjectReference'] & {
      account_id?: string;
      /** Format: date-time */
      created_at?: string;
      status?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    PullSecretRotationList: components['schemas']['List'] & {
      items?: components['schemas']['PullSecretRotation'][];
    };
    PullSecretRotationRequest: components['schemas']['ObjectReference'] & Record<string, never>;
    Quota: components['schemas']['ObjectReference'] & {
      /** Format: date-time */
      created_at?: string;
      description?: string;
      resource_type?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    QuotaAuthorizationRequest: {
      account_username: string;
      availability_zone?: string;
      cloud_provider_id?: string;
      display_name?: string;
      product_id?: string;
      quota_version?: string;
      reserve?: boolean;
      resource_id?: string;
      resources: components['schemas']['ReservedResource'][];
      subscription_id?: string;
    };
    QuotaAuthorizationResponse: {
      allowed: boolean;
      excess_resources: components['schemas']['ExcessResource'][];
      organization_id?: string;
      subscription?: components['schemas']['ObjectReference'];
    };
    QuotaCost: components['schemas']['ObjectReference'] & {
      allowed: number;
      cloud_accounts?: components['schemas']['CloudAccount'][];
      consumed: number;
      organization_id?: string;
      quota_id: string;
      related_resources?: components['schemas']['RelatedResource'][];
      version?: string;
    };
    QuotaCostList: components['schemas']['List'] & {
      items?: components['schemas']['QuotaCost'][];
    };
    QuotaList: components['schemas']['List'] & {
      items?: components['schemas']['Quota'][];
    };
    QuotaRules: components['schemas']['ObjectReference'] & {
      availability_zone?: string;
      /** @enum {string} */
      billing_model?: QuotaRulesBilling_model;
      byoc?: string;
      cloud?: string;
      cost: number;
      name?: string;
      product?: string;
      quota_id?: string;
      type?: string;
    };
    QuotaRulesList: components['schemas']['List'] & {
      items?: components['schemas']['QuotaRules'][];
    };
    Region: components['schemas']['ObjectReference'] & {
      cloud_provider_id: string;
      id: string;
      url: string;
    };
    RegionList: components['schemas']['List'] & {
      items?: components['schemas']['Region'][];
    };
    RegionSummary: components['schemas']['ObjectReference'] & {
      cloud_provider_id: string;
      count: number;
      region_id: string;
      url: string;
    };
    RegionSummaryList: components['schemas']['List'] & {
      items?: components['schemas']['RegionSummary'][];
    };
    Registry: components['schemas']['ObjectReference'] & {
      cloudAlias?: boolean;
      /** Format: date-time */
      created_at?: string;
      name?: string;
      org_name?: string;
      team_name?: string;
      type?: string;
      /** Format: date-time */
      updated_at?: string;
      url?: string;
    };
    RegistryAddress: {
      [key: string]: {
        auth?: string;
        /** Format: email */
        email?: string;
      };
    };
    RegistryCreateRequest: components['schemas']['RegistryRequest'] & unknown;
    RegistryCredential: components['schemas']['ObjectReference'] & {
      account?: components['schemas']['ObjectReference'];
      /** Format: date-time */
      created_at?: string;
      external_resource_id?: string;
      registry?: components['schemas']['ObjectReference'];
      token?: string;
      /** Format: date-time */
      updated_at?: string;
      username?: string;
    };
    RegistryCredentialList: components['schemas']['List'] & {
      items?: components['schemas']['RegistryCredential'][];
    };
    RegistryCredentialPatchRequest: {
      account_id?: string;
      external_resource_id?: string;
      registry_id?: string;
      token?: string;
      username?: string;
    };
    RegistryList: components['schemas']['List'] & {
      items?: components['schemas']['Registry'][];
    };
    RegistryRequest: {
      cloudAlias?: boolean;
      name?: string;
      org_name?: string;
      team_name?: string;
      type?: string;
      url?: string;
    };
    RelatedResource: components['schemas']['ObjectReference'] & {
      availability_zone_type: string;
      /** @enum {string} */
      billing_model: RelatedResourceBilling_model;
      byoc: string;
      cloud_provider: string;
      cost: number;
      product: string;
      product_id?: string;
      resource_name?: string;
      resource_type: string;
    };
    ReservedResource: components['schemas']['ObjectReference'] & {
      availability_zone_type?: string;
      billing_marketplace_account?: string;
      /** @enum {string} */
      billing_model?: ReservedResourceBilling_model;
      byoc: boolean;
      cluster?: boolean;
      count?: number;
      /** Format: date-time */
      created_at?: string;
      resource_name?: string;
      /** @enum {string} */
      resource_type?: ReservedResourceResource_type;
      scope?: string;
      subscription?: components['schemas']['ObjectReference'];
      /** Format: date-time */
      updated_at?: string;
    };
    ReservedResourceList: components['schemas']['List'] & {
      items?: components['schemas']['ReservedResource'][];
    };
    ReservedResourcePatchRequest: {
      /** @enum {string} */
      billing_model?: ReservedResourcePatchRequestBilling_model;
      scope?: string;
    };
    ResourceQuota: components['schemas']['ObjectReference'] & {
      /** Format: date-time */
      created_at?: string;
      organization_id?: string;
      sku?: string;
      sku_count: number;
      /** @enum {string} */
      type?: ResourceQuotaType;
      /** Format: date-time */
      updated_at?: string;
    };
    ResourceQuotaList: components['schemas']['List'] & {
      items?: components['schemas']['ResourceQuota'][];
    };
    ResourceQuotaRequest: {
      sku: string;
      sku_count: number;
      /** @enum {string} */
      type?: ResourceQuotaRequestType;
    };
    ResourceReview: {
      account_username: string;
      /** @enum {string} */
      action: ResourceReviewAction;
      cluster_ids: string[];
      cluster_uuids: string[];
      organization_ids: string[];
      /** @enum {string} */
      resource_type: ResourceReviewResource_type;
      subscription_ids: string[];
    };
    ResourceReviewRequest: {
      account_username?: string;
      /** @enum {string} */
      action?: ResourceReviewRequestAction;
      /** @enum {string} */
      resource_type?: ResourceReviewRequestResource_type;
    };
    Role: components['schemas']['ObjectReference'] & {
      name?: string;
      permissions?: components['schemas']['Permission'][];
    };
    RoleBinding: components['schemas']['ObjectReference'] & {
      account?: components['schemas']['ObjectReference'];
      account_group?: components['schemas']['ObjectReference'];
      config_managed?: boolean;
      /** Format: date-time */
      created_at?: string;
      /** @enum {string} */
      managed_by?: RoleBindingManaged_by;
      organization?: components['schemas']['ObjectReference'];
      role?: components['schemas']['ObjectReference'];
      subscription?: components['schemas']['ObjectReference'];
      /** @enum {string} */
      type?: RoleBindingType;
      /** Format: date-time */
      updated_at?: string;
    };
    RoleBindingCreateRequest: components['schemas']['RoleBindingRequest'] & unknown;
    RoleBindingList: components['schemas']['List'] & {
      items?: components['schemas']['RoleBinding'][];
    };
    RoleBindingRequest: {
      account_group_id?: string;
      account_id?: string;
      config_managed?: boolean;
      managed_by?: string;
      organization_id?: string;
      role_id?: string;
      subscription_id?: string;
      type?: string;
    };
    RoleList: components['schemas']['List'] & {
      items?: components['schemas']['Role'][];
    };
    SKU: components['schemas']['ObjectReference'] & {
      /** Format: date-time */
      created_at?: string;
      description?: string;
      /** Format: date-time */
      updated_at?: string;
    };
    SelfAccessReview: {
      /** @enum {string} */
      action: SelfAccessReviewAction;
      cluster_id?: string;
      cluster_uuid?: string;
      organization_id?: string;
      /** @enum {string} */
      resource_type: SelfAccessReviewResource_type;
      subscription_id?: string;
    };
    SelfEntitlementStatus: {
      product?: string;
      status?: string;
    };
    SelfFeatureReview: {
      feature: string;
    };
    SelfResourceReview: {
      /** @enum {string} */
      action: SelfResourceReviewAction;
      cluster_ids: string[];
      cluster_uuids: string[];
      organization_ids: string[];
      /** @enum {string} */
      resource_type: SelfResourceReviewResource_type;
      subscription_ids: string[];
    };
    SelfResourceReviewRequest: {
      /** @enum {string} */
      action?: SelfResourceReviewRequestAction;
      /** @enum {string} */
      resource_type?: SelfResourceReviewRequestResource_type;
    };
    SelfServiceLandingPageSchema: {
      configTryLearn?: {
        configure?: components['schemas']['LandingPageCTLItem'][];
        try?: components['schemas']['LandingPageCTLItem'][];
      };
      estate?: {
        items?: components['schemas']['LandingPageEstateItem'][];
      };
    };
    SelfTermsReview: {
      /** @default true */
      check_optional_terms: boolean;
      event_code?: string;
      site_code?: string;
    };
    SkuList: components['schemas']['List'] & {
      items?: components['schemas']['SKU'][];
    };
    SkuRules: components['schemas']['ObjectReference'] & {
      allowed?: number;
      quota_id?: string;
      sku?: string;
    };
    SkuRulesList: components['schemas']['List'] & {
      items?: components['schemas']['SkuRules'][];
    };
    Subscription: components['schemas']['SubscriptionCommonFields'] & {
      capabilities?: components['schemas']['Capability'][];
      cluster_transfers?: components['schemas']['ClusterTransfer'][];
      /** Format: date-time */
      created_at?: string;
      creator?: components['schemas']['AccountReference'];
      /**
       * Format: date-time
       * @description Calulated as the subscription created date + 60 days
       */
      eval_expiration_date?: string;
      labels?: components['schemas']['Label'][];
      metrics?: components['schemas']['OneMetric'][];
      notification_contacts?: components['schemas']['Account'][];
      plan?: components['schemas']['Plan'];
      /** Format: date-time */
      updated_at?: string;
    };
    SubscriptionCommonFields: components['schemas']['ObjectReference'] & {
      /**
       * Format: date-time
       * @description If set, the date the subscription expires based on the billing model
       */
      billing_expiration_date?: string;
      billing_marketplace_account?: string;
      cloud_account_id?: string;
      cloud_provider_id?: string;
      /** @enum {string} */
      cluster_billing_model?: SubscriptionCommonFieldsCluster_billing_model;
      cluster_id?: string;
      console_url?: string;
      consumer_uuid?: string;
      cpu_total?: number;
      creator_id?: string;
      display_name?: string;
      external_cluster_id?: string;
      /**
       * Format: date-time
       * @description Last time this subscription were reconciled about cluster usage
       */
      last_reconcile_date?: string;
      /**
       * Format: date-time
       * @description Last time status was set to Released for this cluster/subscription in Unix time
       */
      last_released_at?: string;
      /**
       * Format: date-time
       * @description Last telemetry authorization request for this cluster/subscription in Unix time
       */
      last_telemetry_date?: string;
      managed: boolean;
      organization?: components['schemas']['Organization'];
      organization_id?: string;
      plan_id?: string;
      /** @enum {string} */
      product_bundle?: SubscriptionCommonFieldsProduct_bundle;
      provenance?: string;
      region_id?: string;
      released?: boolean;
      rh_region_id?: string;
      /** @enum {string} */
      service_level?: SubscriptionCommonFieldsService_level;
      socket_total?: number;
      /** @enum {string} */
      status?: SubscriptionCommonFieldsStatus;
      /** @enum {string} */
      support_level?: SubscriptionCommonFieldsSupport_level;
      /** @enum {string} */
      system_units?: SubscriptionCommonFieldsSystem_units;
      /**
       * Format: date-time
       * @description If the subscription is a trial, date the trial ends
       */
      trial_end_date?: string;
      /** @enum {string} */
      usage?: SubscriptionCommonFieldsUsage;
    };
    SubscriptionCreateRequest: {
      cluster_uuid: string;
      console_url?: string;
      display_name?: string;
      /** @enum {string} */
      plan_id: SubscriptionCreateRequestPlan_id;
      /** @enum {string} */
      status: SubscriptionCreateRequestStatus;
    };
    SubscriptionList: components['schemas']['List'] & {
      items?: components['schemas']['Subscription'][];
    };
    SubscriptionMetric: {
      _id?: string;
    };
    SubscriptionMetricList: components['schemas']['List'] & {
      items?: components['schemas']['SubscriptionMetric'][];
    };
    SubscriptionPatchRequest: {
      /** Format: date-time */
      billing_expiration_date?: string;
      cloud_account_id?: string;
      cloud_provider_id?: string;
      /** @enum {string} */
      cluster_billing_model?: SubscriptionPatchRequestCluster_billing_model;
      cluster_id?: string;
      console_url?: string;
      consumer_uuid?: string;
      cpu_total?: number;
      creator_id?: string;
      display_name?: string;
      external_cluster_id?: string;
      managed?: boolean;
      organization_id?: string;
      plan_id?: string;
      /** @enum {string} */
      product_bundle?: SubscriptionPatchRequestProduct_bundle;
      provenance?: string;
      region_id?: string;
      released?: boolean;
      /** @enum {string} */
      service_level?: SubscriptionPatchRequestService_level;
      socket_total?: number;
      status?: string;
      /** @enum {string} */
      support_level?: SubscriptionPatchRequestSupport_level;
      /** @enum {string} */
      system_units?: SubscriptionPatchRequestSystem_units;
      /** Format: date-time */
      trial_end_date?: string;
      /** @enum {string} */
      usage?: SubscriptionPatchRequestUsage;
    };
    SubscriptionRoleBinding: components['schemas']['ObjectReference'] & {
      account?: components['schemas']['AccountReference'];
      account_email?: string;
      account_username?: string;
      /** Format: date-time */
      created_at?: string;
      role?: components['schemas']['ObjectReference'];
      subscription?: components['schemas']['ObjectReference'];
      /** Format: date-time */
      updated_at?: string;
    };
    SubscriptionRoleBindingCreateRequest: {
      account_username: string;
      role_id: string;
    };
    SubscriptionRoleBindingList: components['schemas']['List'] & {
      items?: components['schemas']['SubscriptionRoleBinding'][];
    };
    Summary: components['schemas']['ObjectReference'] & {
      metrics: components['schemas']['SummaryMetrics'][];
      name?: string;
    };
    SummaryMetrics: {
      name?: string;
      vector?: components['schemas']['SummaryVector'][];
    };
    SummaryVector: {
      /** Format: date-time */
      time?: string;
      /** Format: double */
      value?: number;
    };
    SupportCasesCreatedResponse: {
      caseNumber?: string;
      cluster_id?: string;
      cluster_uuid?: string;
      description?: string;
      severity?: string;
      status?: string;
      subscription_id?: string;
      summary?: string;
      uri?: string;
    };
    SupportCasesRequest: {
      account_number?: string;
      case_language?: string;
      cluster_id?: string;
      cluster_uuid?: string;
      contact_sso_name?: string;
      description: string;
      event_stream_id?: string;
      openshift_cluster_id?: string;
      /** @default OpenShift Container Platform */
      product: string;
      /** @enum {string} */
      severity: SupportCasesRequestSeverity;
      subscription_id?: string;
      summary: string;
      /** @default 4.10 */
      version: string;
    };
    TermsReview: {
      account_username: string;
      /** @default true */
      check_optional_terms: boolean;
      event_code?: string;
      site_code?: string;
    };
    TermsReviewResponse: {
      account_id: string;
      organization_id: string;
      redirect_url?: string;
      terms_available: boolean;
      terms_required: boolean;
    };
    TokenAuthorizationRequest: {
      authorization_token?: string;
    };
    TokenAuthorizationResponse: {
      account?: components['schemas']['Account'];
    };
  };
  responses: never;
  parameters: {
    /** @description The id of account */
    accountId: string;
    /** @description The id of account group assignment */
    acctGrpAsgnId: string;
    /** @description The id of account group */
    acctGrpId: string;
    /** @description The id of a support case */
    caseId: string;
    /** @description If true, deletes the associated resources (e.g. role bindings) for an account along with the account itself */
    deleteAssociatedResources: boolean;
    /** @description If true, instructs API to avoid making any changes, but rather run through validations only. */
    dryRun: boolean;
    /** @description A comma-separated list of subscription statuses. Subscriptions with these statuses will be excluded from results. This options is mutually exclusive with includeSubscriptionStatuses. */
    excludeSubscriptionStatuses: string;
    /** @description The external resource id of record */
    externalResourceId: string;
    /** @description If true, includes the account reference information in the output. Could slow request response time. */
    fetchAccounts: boolean;
    /** @description If true, includes the capabilities on a subscription in the output. Could slow request response time. */
    fetchCapabilities: boolean;
    /** @description If true, includes the marketplace cloud accounts in the output. Could slow request response time. */
    fetchCloudAccounts: boolean;
    /** @description If true, returns either an empty result set or a valid ClusterTransfer list on a subscription in the output. Could slow request response time. */
    fetchClusterTransfers: boolean;
    /** @description If true, fetches, from the clusters service, the total numbers of CPU's and sockets under an obligation, and includes in the output. Could slow request response time. */
    fetchCpuAndSocket: boolean;
    /** @description If true, includes the labels on a subscription/organization/account in the output. Could slow request response time. */
    fetchLabels: boolean;
    /** @description If true, includes the organization object on a subscription in the output. Could slow request response time. */
    fetchOrganization: boolean;
    /** @description If true, includes the related resources in the output. Could slow request response time. */
    fetchRelatedResources: boolean;
    /** @description If true, includes the RHIT account_id in the output. Could slow request response time. */
    fetchRhit: boolean;
    /** @description Supplies a comma-separated list of fields to be returned.
     *     Fields of sub-structures and of arrays use <structure>.<field> notation.
     *     <stucture>.* means all field of a structure
     *     Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)
     *
     *     ```
     *     ocm get subscriptions --parameter fields=id,href,plan.id,plan.kind,labels.* --parameter fetchLabels=true
     *     ``` */
    fields: string;
    /** @description If true, includes that ConsumedQuota should be recalculated. */
    forceRecalc: boolean;
    /** @description The id of record */
    id: string;
    /** @description A comma-separated list of subscription statuses. Only subscriptions with these statuses will be included into results. This options is mutually exclusive with excludeSubscriptionStatuses. */
    includeSubscriptionStatuses: string;
    /** @description The key of the label */
    key: string;
    /** @description Specifies the criteria to filter the subscription resource based on their labels.
     *     A label is represented as a `key=value` pair,
     *
     *     ```
     *     labels = "foo=bar"
     *     ```
     *
     *     and multiple labels are separated by comma,
     *
     *     ```
     *     labels = "foo=bar,fooz=barz"
     *     ``` */
    labels: string;
    /** @description The name of the metric */
    metricName: string;
    /** @description The `search` paramter specifies the PromQL selector. The syntax is defined by Prometheus at
     *     https://prometheus.io/docs/prometheus/latest/querying/basics/#time-series-selectors.
     *     It only supports simple selections as shown in https://prometheus.io/docs/prometheus/latest/querying/examples/#simple-time-series-selection.
     *     For example, in order to retrieve subscription_sync_total with names starting with `managed` and with a channel = `production`:
     *
     *     ```
     *     name=~'managed.*',channel='production'
     *     ```
     *
     *     If the parameter isn't provided, or if the value is empty, then all the records will be returned. */
    metricSearch: string;
    /** @description The name of the default capability */
    name: string;
    /** @description Specifies the order by criteria. The syntax of this parameter is
     *     similar to the syntax of the _order by_ clause of an SQL statement,
     *     but using the names of the json attributes / column of the account.
     *     For example, in order to retrieve all accounts ordered by username:
     *
     *     ```sql
     *     username asc
     *     ```
     *
     *     Or in order to retrieve all accounts ordered by username _and_ first name:
     *
     *     ```sql
     *     username asc, firstName asc
     *     ```
     *
     *     If the parameter isn't provided, or if the value is empty, then
     *     no explicit ordering will be applied. */
    orderBy: string;
    /** @description The id of organization */
    orgId: string;
    /** @description Page number of record list when record list exceeds specified page size */
    page: number;
    /** @description The product for self_entitlement. The supported products are [rosa]. */
    product: string;
    /** @description The id of quota */
    quotaId: string;
    /** @description If true, When returning a list of cluster_ids/cluster_uuids/subscription_ids, if those are already included in one of the organizations provided in organization_ids, do not include it in the list. */
    reduceClusterList: boolean;
    /** @description The id of reserved resource */
    reservedResourceId: string;
    /** @description The id of the pull secret rotation */
    rotationId: string;
    /** @description Specifies the search criteria. The syntax of this parameter is
     *     similar to the syntax of the _where_ clause of an SQL statement,
     *     using the names of the json attributes / column names of the account.
     *     For example, in order to retrieve all the accounts with a username starting with `my`:
     *
     *     ```sql
     *     username like 'my%'
     *     ```
     *
     *     > **Important Note**:
     *     Account Management Service uses **KSUID** as an **ID** field.
     *     KSUID contains a timestamp component that allows them to be sorted by generation time.
     *     As this field uses an index, please use it to sort by instead of `created_at` field.
     *
     *     The search criteria can also be applied on related resource.
     *     For example, in order to retrieve all the subscriptions labeled by `foo=bar`,
     *
     *     ```sql
     *     labels.key = 'foo' and labels.value = 'bar'
     *     ```
     *
     *     If the parameter isn't provided, or if the value is empty, then
     *     all the accounts that the user has permission to see will be
     *     returned. */
    search: string;
    /** @description Maximum number of records to return */
    size: number;
    /** @description The id of subscription */
    subId: string;
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type AccessReview = components['schemas']['AccessReview'];
export type AccessReviewResponse = components['schemas']['AccessReviewResponse'];
export type AccessTokenCfg = components['schemas']['AccessTokenCfg'];
export type Account = components['schemas']['Account'];
export type AccountGroup = components['schemas']['AccountGroup'];
export type AccountGroupAssignment = components['schemas']['AccountGroupAssignment'];
export type AccountGroupAssignmentList = components['schemas']['AccountGroupAssignmentList'];
export type AccountGroupList = components['schemas']['AccountGroupList'];
export type AccountGroupRequest = components['schemas']['AccountGroupRequest'];
export type AccountList = components['schemas']['AccountList'];
export type AccountPatchRequest = components['schemas']['AccountPatchRequest'];
export type AccountReference = components['schemas']['AccountReference'];
export type BillingModel = components['schemas']['BillingModel'];
export type BillingModelList = components['schemas']['BillingModelList'];
export type Capability = components['schemas']['Capability'];
export type CapabilityList = components['schemas']['CapabilityList'];
export type CapabilityReview = components['schemas']['CapabilityReview'];
export type CapabilityReviewRequest = components['schemas']['CapabilityReviewRequest'];
export type Certificate = components['schemas']['Certificate'];
export type CertificateSerial = components['schemas']['CertificateSerial'];
export type CertificatesRequest = components['schemas']['CertificatesRequest'];
export type CloudAccount = components['schemas']['CloudAccount'];
export type CloudResource = components['schemas']['CloudResource'];
export type CloudResourceList = components['schemas']['CloudResourceList'];
export type ClusterAuthorizationRequest = components['schemas']['ClusterAuthorizationRequest'];
export type ClusterAuthorizationResponse = components['schemas']['ClusterAuthorizationResponse'];
export type ClusterMetricsNodes = components['schemas']['ClusterMetricsNodes'];
export type ClusterRegistrationRequest = components['schemas']['ClusterRegistrationRequest'];
export type ClusterRegistrationResponse = components['schemas']['ClusterRegistrationResponse'];
export type ClusterResource = components['schemas']['ClusterResource'];
export type ClusterTransfer = components['schemas']['ClusterTransfer'];
export type ClusterTransferList = components['schemas']['ClusterTransferList'];
export type ClusterTransferPatchRequest = components['schemas']['ClusterTransferPatchRequest'];
export type ClusterTransferRequest = components['schemas']['ClusterTransferRequest'];
export type ClusterUpgrade = components['schemas']['ClusterUpgrade'];
export type ConsumedQuota = components['schemas']['ConsumedQuota'];
export type ConsumedQuotaList = components['schemas']['ConsumedQuotaList'];
export type Contract = components['schemas']['Contract'];
export type ContractDimension = components['schemas']['ContractDimension'];
export type DefaultCapability = components['schemas']['DefaultCapability'];
export type DefaultCapabilityList = components['schemas']['DefaultCapabilityList'];
export type DeletedSubscription = components['schemas']['DeletedSubscription'];
export type DeletedSubscriptionList = components['schemas']['DeletedSubscriptionList'];
export type EntitlementCertificatesList = components['schemas']['EntitlementCertificatesList'];
export type EntitlementCertificatesRequest =
  components['schemas']['EntitlementCertificatesRequest'];
export type EphemeralResourceQuota = components['schemas']['EphemeralResourceQuota'];
export type Error = components['schemas']['Error'];
export type ErrorList = components['schemas']['ErrorList'];
export type ExcessResource = components['schemas']['ExcessResource'];
export type ExportControlReview = components['schemas']['ExportControlReview'];
export type ExportControlReviewRequest = components['schemas']['ExportControlReviewRequest'];
export type FeatureReview = components['schemas']['FeatureReview'];
export type FeatureReviewResponse = components['schemas']['FeatureReviewResponse'];
export type FeatureToggle = components['schemas']['FeatureToggle'];
export type FeatureToggleQueryRequest = components['schemas']['FeatureToggleQueryRequest'];
export type Label = components['schemas']['Label'];
export type LabelList = components['schemas']['LabelList'];
export type LandingPageCtlItem = components['schemas']['LandingPageCTLItem'];
export type LandingPageEstateItem = components['schemas']['LandingPageEstateItem'];
export type LandingPageLinkShape = components['schemas']['LandingPageLinkShape'];
export type List = components['schemas']['List'];
export type Metric = components['schemas']['Metric'];
export type MetricsList = components['schemas']['MetricsList'];
export type NotificationContactCreateRequest =
  components['schemas']['NotificationContactCreateRequest'];
export type NotifyDetailsRequest = components['schemas']['NotifyDetailsRequest'];
export type NotifyDetailsResponse = components['schemas']['NotifyDetailsResponse'];
export type NotifyDetailsResponseList = components['schemas']['NotifyDetailsResponseList'];
export type ObjectReference = components['schemas']['ObjectReference'];
export type OndemandMetrics = components['schemas']['OndemandMetrics'];
export type OndemandMetricsAlerts = components['schemas']['OndemandMetricsAlerts'];
export type OndemandMetricsClusterOperators =
  components['schemas']['OndemandMetricsClusterOperators'];
export type OndemandMetricsNodes = components['schemas']['OndemandMetricsNodes'];
export type OneMetric = components['schemas']['OneMetric'];
export type Organization = components['schemas']['Organization'];
export type OrganizationList = components['schemas']['OrganizationList'];
export type OrganizationPatchRequest = components['schemas']['OrganizationPatchRequest'];
export type Permission = components['schemas']['Permission'];
export type PermissionList = components['schemas']['PermissionList'];
export type Plan = components['schemas']['Plan'];
export type PlanList = components['schemas']['PlanList'];
export type PullSecretRequest = components['schemas']['PullSecretRequest'];
export type PullSecretRotation = components['schemas']['PullSecretRotation'];
export type PullSecretRotationList = components['schemas']['PullSecretRotationList'];
export type PullSecretRotationRequest = components['schemas']['PullSecretRotationRequest'];
export type Quota = components['schemas']['Quota'];
export type QuotaAuthorizationRequest = components['schemas']['QuotaAuthorizationRequest'];
export type QuotaAuthorizationResponse = components['schemas']['QuotaAuthorizationResponse'];
export type QuotaCost = components['schemas']['QuotaCost'];
export type QuotaCostList = components['schemas']['QuotaCostList'];
export type QuotaList = components['schemas']['QuotaList'];
export type QuotaRules = components['schemas']['QuotaRules'];
export type QuotaRulesList = components['schemas']['QuotaRulesList'];
export type Region = components['schemas']['Region'];
export type RegionList = components['schemas']['RegionList'];
export type RegionSummary = components['schemas']['RegionSummary'];
export type RegionSummaryList = components['schemas']['RegionSummaryList'];
export type Registry = components['schemas']['Registry'];
export type RegistryAddress = components['schemas']['RegistryAddress'];
export type RegistryCreateRequest = components['schemas']['RegistryCreateRequest'];
export type RegistryCredential = components['schemas']['RegistryCredential'];
export type RegistryCredentialList = components['schemas']['RegistryCredentialList'];
export type RegistryCredentialPatchRequest =
  components['schemas']['RegistryCredentialPatchRequest'];
export type RegistryList = components['schemas']['RegistryList'];
export type RegistryRequest = components['schemas']['RegistryRequest'];
export type RelatedResource = components['schemas']['RelatedResource'];
export type ReservedResource = components['schemas']['ReservedResource'];
export type ReservedResourceList = components['schemas']['ReservedResourceList'];
export type ReservedResourcePatchRequest = components['schemas']['ReservedResourcePatchRequest'];
export type ResourceQuota = components['schemas']['ResourceQuota'];
export type ResourceQuotaList = components['schemas']['ResourceQuotaList'];
export type ResourceQuotaRequest = components['schemas']['ResourceQuotaRequest'];
export type ResourceReview = components['schemas']['ResourceReview'];
export type ResourceReviewRequest = components['schemas']['ResourceReviewRequest'];
export type Role = components['schemas']['Role'];
export type RoleBinding = components['schemas']['RoleBinding'];
export type RoleBindingCreateRequest = components['schemas']['RoleBindingCreateRequest'];
export type RoleBindingList = components['schemas']['RoleBindingList'];
export type RoleBindingRequest = components['schemas']['RoleBindingRequest'];
export type RoleList = components['schemas']['RoleList'];
export type Sku = components['schemas']['SKU'];
export type SelfAccessReview = components['schemas']['SelfAccessReview'];
export type SelfEntitlementStatus = components['schemas']['SelfEntitlementStatus'];
export type SelfFeatureReview = components['schemas']['SelfFeatureReview'];
export type SelfResourceReview = components['schemas']['SelfResourceReview'];
export type SelfResourceReviewRequest = components['schemas']['SelfResourceReviewRequest'];
export type SelfServiceLandingPageSchema = components['schemas']['SelfServiceLandingPageSchema'];
export type SelfTermsReview = components['schemas']['SelfTermsReview'];
export type SkuList = components['schemas']['SkuList'];
export type SkuRules = components['schemas']['SkuRules'];
export type SkuRulesList = components['schemas']['SkuRulesList'];
export type Subscription = components['schemas']['Subscription'];
export type SubscriptionCommonFields = components['schemas']['SubscriptionCommonFields'];
export type SubscriptionCreateRequest = components['schemas']['SubscriptionCreateRequest'];
export type SubscriptionList = components['schemas']['SubscriptionList'];
export type SubscriptionMetric = components['schemas']['SubscriptionMetric'];
export type SubscriptionMetricList = components['schemas']['SubscriptionMetricList'];
export type SubscriptionPatchRequest = components['schemas']['SubscriptionPatchRequest'];
export type SubscriptionRoleBinding = components['schemas']['SubscriptionRoleBinding'];
export type SubscriptionRoleBindingCreateRequest =
  components['schemas']['SubscriptionRoleBindingCreateRequest'];
export type SubscriptionRoleBindingList = components['schemas']['SubscriptionRoleBindingList'];
export type Summary = components['schemas']['Summary'];
export type SummaryMetrics = components['schemas']['SummaryMetrics'];
export type SummaryVector = components['schemas']['SummaryVector'];
export type SupportCasesCreatedResponse = components['schemas']['SupportCasesCreatedResponse'];
export type SupportCasesRequest = components['schemas']['SupportCasesRequest'];
export type TermsReview = components['schemas']['TermsReview'];
export type TermsReviewResponse = components['schemas']['TermsReviewResponse'];
export type TokenAuthorizationRequest = components['schemas']['TokenAuthorizationRequest'];
export type TokenAuthorizationResponse = components['schemas']['TokenAuthorizationResponse'];
export type ParameterAccountId = components['parameters']['accountId'];
export type ParameterAcctGrpAsgnId = components['parameters']['acctGrpAsgnId'];
export type ParameterAcctGrpId = components['parameters']['acctGrpId'];
export type ParameterCaseId = components['parameters']['caseId'];
export type ParameterDeleteAssociatedResources =
  components['parameters']['deleteAssociatedResources'];
export type ParameterDryRun = components['parameters']['dryRun'];
export type ParameterExcludeSubscriptionStatuses =
  components['parameters']['excludeSubscriptionStatuses'];
export type ParameterExternalResourceId = components['parameters']['externalResourceId'];
export type ParameterFetchAccounts = components['parameters']['fetchAccounts'];
export type ParameterFetchCapabilities = components['parameters']['fetchCapabilities'];
export type ParameterFetchCloudAccounts = components['parameters']['fetchCloudAccounts'];
export type ParameterFetchClusterTransfers = components['parameters']['fetchClusterTransfers'];
export type ParameterFetchCpuAndSocket = components['parameters']['fetchCpuAndSocket'];
export type ParameterFetchLabels = components['parameters']['fetchLabels'];
export type ParameterFetchOrganization = components['parameters']['fetchOrganization'];
export type ParameterFetchRelatedResources = components['parameters']['fetchRelatedResources'];
export type ParameterFetchRhit = components['parameters']['fetchRhit'];
export type ParameterFields = components['parameters']['fields'];
export type ParameterForceRecalc = components['parameters']['forceRecalc'];
export type ParameterId = components['parameters']['id'];
export type ParameterIncludeSubscriptionStatuses =
  components['parameters']['includeSubscriptionStatuses'];
export type ParameterKey = components['parameters']['key'];
export type ParameterLabels = components['parameters']['labels'];
export type ParameterMetricName = components['parameters']['metricName'];
export type ParameterMetricSearch = components['parameters']['metricSearch'];
export type ParameterName = components['parameters']['name'];
export type ParameterOrderBy = components['parameters']['orderBy'];
export type ParameterOrgId = components['parameters']['orgId'];
export type ParameterPage = components['parameters']['page'];
export type ParameterProduct = components['parameters']['product'];
export type ParameterQuotaId = components['parameters']['quotaId'];
export type ParameterReduceClusterList = components['parameters']['reduceClusterList'];
export type ParameterReservedResourceId = components['parameters']['reservedResourceId'];
export type ParameterRotationId = components['parameters']['rotationId'];
export type ParameterSearch = components['parameters']['search'];
export type ParameterSize = components['parameters']['size'];
export type ParameterSubId = components['parameters']['subId'];
export type $defs = Record<string, never>;
export enum AccessReviewAction {
  get = 'get',
  list = 'list',
  create = 'create',
  delete = 'delete',
  update = 'update',
}
export enum AccessReviewResource_type {
  AddOn = 'AddOn',
  Flavour = 'Flavour',
  Account = 'Account',
  AccountPool = 'AccountPool',
  Cluster = 'Cluster',
  Plan = 'Plan',
  Subscription = 'Subscription',
  Organization = 'Organization',
  Role = 'Role',
  Permission = 'Permission',
  RoleBinding = 'RoleBinding',
  Registry = 'Registry',
  RegistryCredential = 'RegistryCredential',
  CurrentAccount = 'CurrentAccount',
  AccessReview = 'AccessReview',
  SelfAcccessReview = 'SelfAcccessReview',
  ResourceReview = 'ResourceReview',
  SelfResourceReview = 'SelfResourceReview',
  ClusterRegistration = 'ClusterRegistration',
  AccessToken = 'AccessToken',
  ClusterAuthorization = 'ClusterAuthorization',
  SelfManagedCluster = 'SelfManagedCluster',
  RedhatManagedCluster = 'RedhatManagedCluster',
  ExportControlReview = 'ExportControlReview',
  ClusterLog = 'ClusterLog',
  ClusterCredential = 'ClusterCredential',
  ClusterMetric = 'ClusterMetric',
  ResourceQuota = 'ResourceQuota',
  ReservedResource = 'ReservedResource',
  Dashboard = 'Dashboard',
  ClusterProviderAndRegion = 'ClusterProviderAndRegion',
  ServiceLog = 'ServiceLog',
  InternalServiceLog = 'InternalServiceLog',
  CSLogs = 'CSLogs',
  SubscriptionLabel = 'SubscriptionLabel',
  OrganizationLabel = 'OrganizationLabel',
  SubscriptionLabelInternal = 'SubscriptionLabelInternal',
  SelfAccessReview = 'SelfAccessReview',
  SubscriptionInternal = 'SubscriptionInternal',
  SubscriptionRoleBinding = 'SubscriptionRoleBinding',
  ClusterSelfManaged = 'ClusterSelfManaged',
  ClusterSelfManagedAddon = 'ClusterSelfManagedAddon',
  ClusterSelfManagedLabel = 'ClusterSelfManagedLabel',
  ClusterSelfManagedStatus = 'ClusterSelfManagedStatus',
  OsdTrialProtectedCluster = 'OsdTrialProtectedCluster',
}
export enum AccessReviewResponseAction {
  get = 'get',
  list = 'list',
  create = 'create',
  delete = 'delete',
  update = 'update',
}
export enum AccessReviewResponseResource_type {
  AddOn = 'AddOn',
  Flavour = 'Flavour',
  Account = 'Account',
  AccountPool = 'AccountPool',
  Cluster = 'Cluster',
  Plan = 'Plan',
  Subscription = 'Subscription',
  Organization = 'Organization',
  Role = 'Role',
  Permission = 'Permission',
  RoleBinding = 'RoleBinding',
  Registry = 'Registry',
  RegistryCredential = 'RegistryCredential',
  CurrentAccount = 'CurrentAccount',
  AccessReview = 'AccessReview',
  SelfAcccessReview = 'SelfAcccessReview',
  ResourceReview = 'ResourceReview',
  SelfResourceReview = 'SelfResourceReview',
  ClusterRegistration = 'ClusterRegistration',
  AccessToken = 'AccessToken',
  ClusterAuthorization = 'ClusterAuthorization',
  SelfManagedCluster = 'SelfManagedCluster',
  RedhatManagedCluster = 'RedhatManagedCluster',
  ExportControlReview = 'ExportControlReview',
  ClusterLog = 'ClusterLog',
  ClusterCredential = 'ClusterCredential',
  ClusterMetric = 'ClusterMetric',
  ResourceQuota = 'ResourceQuota',
  ReservedResource = 'ReservedResource',
  Dashboard = 'Dashboard',
  ClusterProviderAndRegion = 'ClusterProviderAndRegion',
  ServiceLog = 'ServiceLog',
  InternalServiceLog = 'InternalServiceLog',
  CSLogs = 'CSLogs',
  SubscriptionLabel = 'SubscriptionLabel',
  OrganizationLabel = 'OrganizationLabel',
  SubscriptionLabelInternal = 'SubscriptionLabelInternal',
  SelfAccessReview = 'SelfAccessReview',
  SubscriptionInternal = 'SubscriptionInternal',
  SubscriptionRoleBinding = 'SubscriptionRoleBinding',
  ClusterSelfManaged = 'ClusterSelfManaged',
  ClusterSelfManagedAddon = 'ClusterSelfManagedAddon',
  ClusterSelfManagedLabel = 'ClusterSelfManagedLabel',
  ClusterSelfManagedStatus = 'ClusterSelfManagedStatus',
  OsdTrialProtectedCluster = 'OsdTrialProtectedCluster',
}
export enum AccountGroupManaged_by {
  SSO = 'SSO',
  OCM = 'OCM',
  RBAC = 'RBAC',
}
export enum AccountGroupAssignmentManaged_by {
  OCM = 'OCM',
  RBAC = 'RBAC',
}
export enum BillingModelBilling_model_type {
  standard = 'standard',
  marketplace = 'marketplace',
  marketplace_aws = 'marketplace-aws',
  marketplace_azure = 'marketplace-azure',
  marketplace_rhm = 'marketplace-rhm',
  marketplace_gcp = 'marketplace-gcp',
}
export enum CapabilityReviewRequestCapability {
  manage_cluster_admin = 'manage_cluster_admin',
}
export enum CapabilityReviewRequestType {
  Cluster = 'Cluster',
}
export enum CertificatesRequestArch {
  x86 = 'x86',
  x86_64 = 'x86_64',
  ppc = 'ppc',
  ppc64 = 'ppc64',
  ppc64le = 'ppc64le',
  s390 = 's390',
  s390x = 's390x',
  ia64 = 'ia64',
  aarch64 = 'aarch64',
}
export enum CertificatesRequestType {
  sca = 'sca',
}
export enum CloudResourceResource_type {
  addon = 'addon',
  compute_node = 'compute.node',
  cluster = 'cluster',
  network_io = 'network.io',
  network_loadbalancer = 'network.loadbalancer',
  pv_storage = 'pv.storage',
}
export enum ClusterAuthorizationRequestProduct_category {
  assistedInstall = 'assistedInstall',
  HostedControlPlane = 'HostedControlPlane',
}
export enum ClusterAuthorizationRequestProduct_id {
  OCP = 'OCP',
  OSD = 'OSD',
  OSDTrial = 'OSDTrial',
  MOA = 'MOA',
  MOA_HostedControlPlane = 'MOA-HostedControlPlane',
  RHMI = 'RHMI',
  RHOSAK = 'RHOSAK',
  RHOSAKTrial = 'RHOSAKTrial',
  RHOSR = 'RHOSR',
  RHOSRTrial = 'RHOSRTrial',
  RHOSE = 'RHOSE',
  RHOSETrial = 'RHOSETrial',
  RHACS = 'RHACS',
  RHACSTrial = 'RHACSTrial',
  ARO = 'ARO',
  RHOIC = 'RHOIC',
  OCP_AssistedInstall = 'OCP-AssistedInstall',
}
export enum ClusterTransferStatus {
  Pending = 'Pending',
  Accepted = 'Accepted',
  Declined = 'Declined',
  Rescinded = 'Rescinded',
  Completed = 'Completed',
}
export enum ConsumedQuotaBilling_model {
  standard = 'standard',
  marketplace = 'marketplace',
  marketplace_aws = 'marketplace-aws',
  marketplace_rhm = 'marketplace-rhm',
  marketplace_azure = 'marketplace-azure',
  marketplace_gcp = 'marketplace-gcp',
}
export enum EntitlementCertificatesRequestArch {
  x86 = 'x86',
  x86_64 = 'x86_64',
  ppc = 'ppc',
  ppc64 = 'ppc64',
  ppc64le = 'ppc64le',
  s390 = 's390',
  s390x = 's390x',
  ia64 = 'ia64',
  aarch64 = 'aarch64',
}
export enum EntitlementCertificatesRequestType {
  sca = 'sca',
}
export enum ExcessResourceBilling_model {
  standard = 'standard',
  marketplace = 'marketplace',
  marketplace_aws = 'marketplace-aws',
  marketplace_rhm = 'marketplace-rhm',
  marketplace_azure = 'marketplace-azure',
  marketplace_gcp = 'marketplace-gcp',
}
export enum LabelManaged_by {
  Config = 'Config',
  User = 'User',
}
export enum NotifyDetailsRequestLog_type {
  clustercreate_high_level = 'clustercreate-high-level',
  clustercreate_details = 'clustercreate-details',
  clusterremove_high_level = 'clusterremove-high-level',
  clusterremove_details = 'clusterremove-details',
  cluster_state_updates = 'cluster-state-updates',
  Cluster_Subscription = 'Cluster Subscription',
  Cluster_Lifecycle = 'Cluster Lifecycle',
  Cluster_Updates = 'Cluster Updates',
  Cluster_Ownership = 'Cluster Ownership',
  Cluster_Access = 'Cluster Access',
  Cluster_Scaling = 'Cluster Scaling',
  Capacity_Management = 'Capacity Management',
  Capacity_management = 'Capacity management',
  Cluster_Configuration = 'Cluster Configuration',
  Cluster_Security = 'Cluster Security',
  Cluster_Add_ons = 'Cluster Add-ons',
  Customer_Support = 'Customer Support',
  Cluster_Networking = 'Cluster Networking',
  General_Notification = 'General Notification',
  cluster_transfer_recipient = 'cluster-transfer-recipient',
}
export enum OneMetricHealth_state {
  healthy = 'healthy',
  unhealthy = 'unhealthy',
  unknown = 'unknown',
}
export enum PermissionAction {
  get = 'get',
  list = 'list',
  create = 'create',
  delete = 'delete',
  update = 'update',
}
export enum QuotaRulesBilling_model {
  standard = 'standard',
  marketplace = 'marketplace',
  marketplace_aws = 'marketplace-aws',
  marketplace_rhm = 'marketplace-rhm',
  marketplace_azure = 'marketplace-azure',
  marketplace_gcp = 'marketplace-gcp',
}
export enum RelatedResourceBilling_model {
  standard = 'standard',
  marketplace = 'marketplace',
  any = 'any',
}
export enum ReservedResourceBilling_model {
  standard = 'standard',
  marketplace = 'marketplace',
  marketplace_aws = 'marketplace-aws',
  marketplace_rhm = 'marketplace-rhm',
  marketplace_azure = 'marketplace-azure',
  marketplace_gcp = 'marketplace-gcp',
}
export enum ReservedResourceResource_type {
  compute_node_aws = 'compute.node.aws',
  pv_storage_aws = 'pv.storage.aws',
  cluster_aws = 'cluster.aws',
  network_io_aws = 'network.io.aws',
  network_loadbalancer_aws = 'network.loadbalancer.aws',
  compute_node_gcp = 'compute.node.gcp',
  pv_storage_gcp = 'pv.storage.gcp',
  cluster_gcp = 'cluster.gcp',
  network_io_gcp = 'network.io.gcp',
  network_gcp_loadbalancer_gcp = 'network-gcp.loadbalancer.gcp',
  addon = 'addon',
  compute_node = 'compute.node',
  pv_storage = 'pv.storage',
  cluster = 'cluster',
  network_io = 'network.io',
  network_loadbalancer = 'network.loadbalancer',
}
export enum ReservedResourcePatchRequestBilling_model {
  standard = 'standard',
  marketplace = 'marketplace',
  marketplace_aws = 'marketplace-aws',
  marketplace_rhm = 'marketplace-rhm',
  marketplace_azure = 'marketplace-azure',
  marketplace_gcp = 'marketplace-gcp',
}
export enum ResourceQuotaType {
  Config = 'Config',
  Manual = 'Manual',
  Subscription = 'Subscription',
}
export enum ResourceQuotaRequestType {
  Config = 'Config',
  Manual = 'Manual',
  Subscription = 'Subscription',
}
export enum ResourceReviewAction {
  get = 'get',
  list = 'list',
  create = 'create',
  delete = 'delete',
  update = 'update',
}
export enum ResourceReviewResource_type {
  Cluster = 'Cluster',
  Subscription = 'Subscription',
}
export enum ResourceReviewRequestAction {
  get = 'get',
  delete = 'delete',
  update = 'update',
}
export enum ResourceReviewRequestResource_type {
  Cluster = 'Cluster',
  Subscription = 'Subscription',
}
export enum RoleBindingManaged_by {
  Config = 'Config',
  User = 'User',
  RBAC = 'RBAC',
}
export enum RoleBindingType {
  Application = 'Application',
  Subscription = 'Subscription',
  Organization = 'Organization',
}
export enum SelfAccessReviewAction {
  get = 'get',
  list = 'list',
  create = 'create',
  delete = 'delete',
  update = 'update',
}
export enum SelfAccessReviewResource_type {
  AddOn = 'AddOn',
  Flavour = 'Flavour',
  Account = 'Account',
  AccountPool = 'AccountPool',
  Cluster = 'Cluster',
  Plan = 'Plan',
  Subscription = 'Subscription',
  Organization = 'Organization',
  Role = 'Role',
  Permission = 'Permission',
  RoleBinding = 'RoleBinding',
  Registry = 'Registry',
  RegistryCredential = 'RegistryCredential',
  CurrentAccount = 'CurrentAccount',
  AccessReview = 'AccessReview',
  SelfAcccessReview = 'SelfAcccessReview',
  ResourceReview = 'ResourceReview',
  SelfResourceReview = 'SelfResourceReview',
  ClusterRegistration = 'ClusterRegistration',
  AccessToken = 'AccessToken',
  ClusterAuthorization = 'ClusterAuthorization',
  SelfManagedCluster = 'SelfManagedCluster',
  RedhatManagedCluster = 'RedhatManagedCluster',
  ExportControlReview = 'ExportControlReview',
  ClusterLog = 'ClusterLog',
  ClusterCredential = 'ClusterCredential',
  ClusterMetric = 'ClusterMetric',
  ResourceQuota = 'ResourceQuota',
  ReservedResource = 'ReservedResource',
  Dashboard = 'Dashboard',
  ClusterProviderAndRegion = 'ClusterProviderAndRegion',
  ServiceLog = 'ServiceLog',
  InternalServiceLog = 'InternalServiceLog',
  CSLogs = 'CSLogs',
  SubscriptionLabel = 'SubscriptionLabel',
  OrganizationLabel = 'OrganizationLabel',
  SubscriptionLabelInternal = 'SubscriptionLabelInternal',
  SelfAccessReview = 'SelfAccessReview',
  SubscriptionInternal = 'SubscriptionInternal',
  SubscriptionRoleBinding = 'SubscriptionRoleBinding',
  ClusterSelfManaged = 'ClusterSelfManaged',
  ClusterSelfManagedAddon = 'ClusterSelfManagedAddon',
  ClusterSelfManagedLabel = 'ClusterSelfManagedLabel',
  ClusterSelfManagedStatus = 'ClusterSelfManagedStatus',
  ClusterKubeletConfig = 'ClusterKubeletConfig',
  ClusterBreakGlassCredential = 'ClusterBreakGlassCredential',
  AccessRequestDecision = 'AccessRequestDecision',
  Idp = 'Idp',
  ClusterAutoscaler = 'ClusterAutoscaler',
  MachinePool = 'MachinePool',
  OsdTrialProtectedCluster = 'OsdTrialProtectedCluster',
}
export enum SelfResourceReviewAction {
  get = 'get',
  list = 'list',
  create = 'create',
  delete = 'delete',
  update = 'update',
}
export enum SelfResourceReviewResource_type {
  Cluster = 'Cluster',
  Subscription = 'Subscription',
}
export enum SelfResourceReviewRequestAction {
  get = 'get',
  delete = 'delete',
  update = 'update',
}
export enum SelfResourceReviewRequestResource_type {
  Cluster = 'Cluster',
  Subscription = 'Subscription',
}
export enum SubscriptionCommonFieldsCluster_billing_model {
  standard = 'standard',
  marketplace = 'marketplace',
  marketplace_aws = 'marketplace-aws',
  marketplace_azure = 'marketplace-azure',
  marketplace_rhm = 'marketplace-rhm',
  marketplace_gcp = 'marketplace-gcp',
}
export enum SubscriptionCommonFieldsProduct_bundle {
  Openshift = 'Openshift',
  JBoss_Middleware = 'JBoss-Middleware',
  IBM_CloudPak = 'IBM-CloudPak',
}
export enum SubscriptionCommonFieldsService_level {
  L1_L3 = 'L1-L3',
  L3_only = 'L3-only',
}
export enum SubscriptionCommonFieldsStatus {
  Active = 'Active',
  Archived = 'Archived',
  Deprovisioned = 'Deprovisioned',
  Disconnected = 'Disconnected',
  Reserved = 'Reserved',
  Stale = 'Stale',
}
export enum SubscriptionCommonFieldsSupport_level {
  Eval = 'Eval',
  Standard = 'Standard',
  Premium = 'Premium',
  Self_Support = 'Self-Support',
  None = 'None',
  Supported_By_IBM = 'Supported By IBM',
}
export enum SubscriptionCommonFieldsSystem_units {
  Cores_vCPU = 'Cores/vCPU',
  Sockets = 'Sockets',
}
export enum SubscriptionCommonFieldsUsage {
  Production = 'Production',
  Development_Test = 'Development/Test',
  Disaster_Recovery = 'Disaster Recovery',
  Academic = 'Academic',
}
export enum SubscriptionCreateRequestPlan_id {
  OCP = 'OCP',
}
export enum SubscriptionCreateRequestStatus {
  Disconnected = 'Disconnected',
}
export enum SubscriptionPatchRequestCluster_billing_model {
  standard = 'standard',
  marketplace = 'marketplace',
  marketplace_aws = 'marketplace-aws',
  marketplace_azure = 'marketplace-azure',
  marketplace_rhm = 'marketplace-rhm',
  marketplace_gcp = 'marketplace-gcp',
}
export enum SubscriptionPatchRequestProduct_bundle {
  Openshift = 'Openshift',
  JBoss_Middleware = 'JBoss-Middleware',
  IBM_CloudPak = 'IBM-CloudPak',
}
export enum SubscriptionPatchRequestService_level {
  L1_L3 = 'L1-L3',
  L3_only = 'L3-only',
}
export enum SubscriptionPatchRequestSupport_level {
  Eval = 'Eval',
  Standard = 'Standard',
  Premium = 'Premium',
  Self_Support = 'Self-Support',
  None = 'None',
  SupportedByIBM = 'SupportedByIBM',
}
export enum SubscriptionPatchRequestSystem_units {
  Cores_vCPU = 'Cores/vCPU',
  Sockets = 'Sockets',
}
export enum SubscriptionPatchRequestUsage {
  Production = 'Production',
  Development_Test = 'Development/Test',
  Disaster_Recovery = 'Disaster Recovery',
  Academic = 'Academic',
}
export enum SupportCasesRequestSeverity {
  Value1_Urgent_ = '1 (Urgent)',
  Value2_High_ = '2 (High)',
  Value3_Normal_ = '3 (Normal)',
  Value4_Low_ = '4 (Low)',
}
export type operations = Record<string, never>;
